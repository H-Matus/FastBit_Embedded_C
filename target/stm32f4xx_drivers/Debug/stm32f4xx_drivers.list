
stm32f4xx_drivers.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001a8  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00000b88  080001a8  080001a8  000011a8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000000  08000d30  08000d30  00002018  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  3 .ARM.extab    00000000  08000d30  08000d30  00002018  2**0
                  CONTENTS
  4 .ARM          00000000  08000d30  08000d30  00002018  2**0
                  CONTENTS
  5 .preinit_array 00000000  08000d30  08000d30  00002018  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08000d30  08000d30  00001d30  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08000d34  08000d34  00001d34  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000018  20000000  08000d38  00002000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000001c  20000018  08000d50  00002018  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000034  08000d50  00002034  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00002018  2**0
                  CONTENTS, READONLY
 12 .debug_info   00001a88  00000000  00000000  00002048  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000063f  00000000  00000000  00003ad0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000001f0  00000000  00000000  00004110  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 0000016d  00000000  00000000  00004300  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000028a0  00000000  00000000  0000446d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00002709  00000000  00000000  00006d0d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0000a909  00000000  00000000  00009416  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  00013d1f  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00000728  00000000  00000000  00013d64  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000065  00000000  00000000  0001448c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a8 <__do_global_dtors_aux>:
 80001a8:	b510      	push	{r4, lr}
 80001aa:	4c05      	ldr	r4, [pc, #20]	@ (80001c0 <__do_global_dtors_aux+0x18>)
 80001ac:	7823      	ldrb	r3, [r4, #0]
 80001ae:	b933      	cbnz	r3, 80001be <__do_global_dtors_aux+0x16>
 80001b0:	4b04      	ldr	r3, [pc, #16]	@ (80001c4 <__do_global_dtors_aux+0x1c>)
 80001b2:	b113      	cbz	r3, 80001ba <__do_global_dtors_aux+0x12>
 80001b4:	4804      	ldr	r0, [pc, #16]	@ (80001c8 <__do_global_dtors_aux+0x20>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	2301      	movs	r3, #1
 80001bc:	7023      	strb	r3, [r4, #0]
 80001be:	bd10      	pop	{r4, pc}
 80001c0:	20000018 	.word	0x20000018
 80001c4:	00000000 	.word	0x00000000
 80001c8:	08000d18 	.word	0x08000d18

080001cc <frame_dummy>:
 80001cc:	b508      	push	{r3, lr}
 80001ce:	4b03      	ldr	r3, [pc, #12]	@ (80001dc <frame_dummy+0x10>)
 80001d0:	b11b      	cbz	r3, 80001da <frame_dummy+0xe>
 80001d2:	4903      	ldr	r1, [pc, #12]	@ (80001e0 <frame_dummy+0x14>)
 80001d4:	4803      	ldr	r0, [pc, #12]	@ (80001e4 <frame_dummy+0x18>)
 80001d6:	f3af 8000 	nop.w
 80001da:	bd08      	pop	{r3, pc}
 80001dc:	00000000 	.word	0x00000000
 80001e0:	2000001c 	.word	0x2000001c
 80001e4:	08000d18 	.word	0x08000d18

080001e8 <I2C1_GPIOInits>:
 * PB7 --> I2C1_SDA
 * Alternate mode function = 4
 */

void I2C1_GPIOInits(void)
{
 80001e8:	b580      	push	{r7, lr}
 80001ea:	b084      	sub	sp, #16
 80001ec:	af00      	add	r7, sp, #0
    GPIO_Handle_t I2CPins;

    I2CPins.pGPIOx = GPIOB;
 80001ee:	4b0e      	ldr	r3, [pc, #56]	@ (8000228 <I2C1_GPIOInits+0x40>)
 80001f0:	607b      	str	r3, [r7, #4]
    I2CPins.GPIO_PinConfig.GPIO_PinMode = GPIO_MODE_ALTFN;
 80001f2:	2302      	movs	r3, #2
 80001f4:	727b      	strb	r3, [r7, #9]
    I2CPins.GPIO_PinConfig.GPIO_PinAltFunMode = 4;
 80001f6:	2304      	movs	r3, #4
 80001f8:	737b      	strb	r3, [r7, #13]
    I2CPins.GPIO_PinConfig.GPIO_PinOPType = GPIO_OP_TYPE_OD;
 80001fa:	2301      	movs	r3, #1
 80001fc:	733b      	strb	r3, [r7, #12]
    I2CPins.GPIO_PinConfig.GPIO_PinPuPdControl = GPIO_PU;
 80001fe:	2301      	movs	r3, #1
 8000200:	72fb      	strb	r3, [r7, #11]
    I2CPins.GPIO_PinConfig.GPIO_PinSpeed = GPIO_SPEED_FAST;
 8000202:	2302      	movs	r3, #2
 8000204:	72bb      	strb	r3, [r7, #10]

    // SCL
    I2CPins.GPIO_PinConfig.GPIO_PinNumber = GPIO_PIN_NO_6;
 8000206:	2306      	movs	r3, #6
 8000208:	723b      	strb	r3, [r7, #8]
    GPIO_Init(&I2CPins);
 800020a:	1d3b      	adds	r3, r7, #4
 800020c:	4618      	mov	r0, r3
 800020e:	f000 f95d 	bl	80004cc <GPIO_Init>

    // SDA
    I2CPins.GPIO_PinConfig.GPIO_PinNumber = GPIO_PIN_NO_7;
 8000212:	2307      	movs	r3, #7
 8000214:	723b      	strb	r3, [r7, #8]
    GPIO_Init(&I2CPins);
 8000216:	1d3b      	adds	r3, r7, #4
 8000218:	4618      	mov	r0, r3
 800021a:	f000 f957 	bl	80004cc <GPIO_Init>
}
 800021e:	bf00      	nop
 8000220:	3710      	adds	r7, #16
 8000222:	46bd      	mov	sp, r7
 8000224:	bd80      	pop	{r7, pc}
 8000226:	bf00      	nop
 8000228:	40020400 	.word	0x40020400

0800022c <I2C1_Inits>:

void I2C1_Inits(I2C_Handle_t *pI2C_Handle)
{
 800022c:	b580      	push	{r7, lr}
 800022e:	b082      	sub	sp, #8
 8000230:	af00      	add	r7, sp, #0
 8000232:	6078      	str	r0, [r7, #4]
    pI2C_Handle->pI2Cx = I2C1;
 8000234:	687b      	ldr	r3, [r7, #4]
 8000236:	4a09      	ldr	r2, [pc, #36]	@ (800025c <I2C1_Inits+0x30>)
 8000238:	601a      	str	r2, [r3, #0]
    pI2C_Handle->I2C_Config.I2C_SCLSpeed = I2C_SCL_SPEED_SM;
 800023a:	687b      	ldr	r3, [r7, #4]
 800023c:	4a08      	ldr	r2, [pc, #32]	@ (8000260 <I2C1_Inits+0x34>)
 800023e:	605a      	str	r2, [r3, #4]
    pI2C_Handle->I2C_Config.I2C_DeviceAddress = 0x0;
 8000240:	687b      	ldr	r3, [r7, #4]
 8000242:	2200      	movs	r2, #0
 8000244:	721a      	strb	r2, [r3, #8]
    pI2C_Handle->I2C_Config.I2C_ACKControl = I2C_ACK_ENABLE; // Generates sclk of 8MHz
 8000246:	687b      	ldr	r3, [r7, #4]
 8000248:	2201      	movs	r2, #1
 800024a:	725a      	strb	r2, [r3, #9]

    I2C_Init(pI2C_Handle);
 800024c:	6878      	ldr	r0, [r7, #4]
 800024e:	f000 fb7f 	bl	8000950 <I2C_Init>
}
 8000252:	bf00      	nop
 8000254:	3708      	adds	r7, #8
 8000256:	46bd      	mov	sp, r7
 8000258:	bd80      	pop	{r7, pc}
 800025a:	bf00      	nop
 800025c:	40005400 	.word	0x40005400
 8000260:	000186a0 	.word	0x000186a0

08000264 <main>:

int main(void)
{
 8000264:	b580      	push	{r7, lr}
 8000266:	b08c      	sub	sp, #48	@ 0x30
 8000268:	af00      	add	r7, sp, #0
    // Configs
    I2C_Handle_t I2C1Handle;

    I2C1_GPIOInits();
 800026a:	f7ff ffbd 	bl	80001e8 <I2C1_GPIOInits>

    I2C1_Inits(&I2C1Handle);
 800026e:	f107 0308 	add.w	r3, r7, #8
 8000272:	4618      	mov	r0, r3
 8000274:	f7ff ffda 	bl	800022c <I2C1_Inits>

    // Enable I2C1 peripheral
    I2C_PeripheralControl(I2C1, ENABLE);
 8000278:	2101      	movs	r1, #1
 800027a:	480a      	ldr	r0, [pc, #40]	@ (80002a4 <main+0x40>)
 800027c:	f000 fc2a 	bl	8000ad4 <I2C_PeripheralControl>

    I2C_ManageACKing(I2C1,I2C_ACK_ENABLE);
 8000280:	2101      	movs	r1, #1
 8000282:	4808      	ldr	r0, [pc, #32]	@ (80002a4 <main+0x40>)
 8000284:	f000 fc42 	bl	8000b0c <I2C_ManageACKing>
    //uint8_t data_request = 0x52;

    //uint8_t data_length = 0x8;
    //uint8_t data = 0x53;

    char data_input[8] = "";
 8000288:	2300      	movs	r3, #0
 800028a:	603b      	str	r3, [r7, #0]
 800028c:	2300      	movs	r3, #0
 800028e:	607b      	str	r3, [r7, #4]

    while(1)
    {
    	(void)I2C_PeripheralReceiveData2( &I2C1Handle, (uint8_t *)data_input, 8 );
 8000290:	4639      	mov	r1, r7
 8000292:	f107 0308 	add.w	r3, r7, #8
 8000296:	2208      	movs	r2, #8
 8000298:	4618      	mov	r0, r3
 800029a:	f000 fc53 	bl	8000b44 <I2C_PeripheralReceiveData2>
 800029e:	bf00      	nop
 80002a0:	e7f6      	b.n	8000290 <main+0x2c>
 80002a2:	bf00      	nop
 80002a4:	40005400 	.word	0x40005400

080002a8 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 80002a8:	480d      	ldr	r0, [pc, #52]	@ (80002e0 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 80002aa:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */

  ldr r0, =_sdata
 80002ac:	480d      	ldr	r0, [pc, #52]	@ (80002e4 <LoopForever+0x6>)
  ldr r1, =_edata
 80002ae:	490e      	ldr	r1, [pc, #56]	@ (80002e8 <LoopForever+0xa>)
  ldr r2, =_sidata
 80002b0:	4a0e      	ldr	r2, [pc, #56]	@ (80002ec <LoopForever+0xe>)
  movs r3, #0
 80002b2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80002b4:	e002      	b.n	80002bc <LoopCopyDataInit>

080002b6 <CopyDataInit>:

CopyDataInit:


  ldr r4, [r2, r3]
 80002b6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80002b8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80002ba:	3304      	adds	r3, #4

080002bc <LoopCopyDataInit>:

LoopCopyDataInit:


  adds r4, r0, r3
 80002bc:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80002be:	428c      	cmp	r4, r1



  bcc CopyDataInit
 80002c0:	d3f9      	bcc.n	80002b6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80002c2:	4a0b      	ldr	r2, [pc, #44]	@ (80002f0 <LoopForever+0x12>)
  ldr r4, =_ebss
 80002c4:	4c0b      	ldr	r4, [pc, #44]	@ (80002f4 <LoopForever+0x16>)
  movs r3, #0
 80002c6:	2300      	movs	r3, #0
  b LoopFillZerobss
 80002c8:	e001      	b.n	80002ce <LoopFillZerobss>

080002ca <FillZerobss>:

FillZerobss:

  str  r3, [r2]
 80002ca:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80002cc:	3204      	adds	r2, #4

080002ce <LoopFillZerobss>:

LoopFillZerobss:

  cmp r2, r4
 80002ce:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80002d0:	d3fb      	bcc.n	80002ca <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit
 80002d2:	f3af 8000 	nop.w
/* Call static constructors */
  bl __libc_init_array
 80002d6:	f000 fcfb 	bl	8000cd0 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80002da:	f7ff ffc3 	bl	8000264 <main>

080002de <LoopForever>:

LoopForever:
    b LoopForever
 80002de:	e7fe      	b.n	80002de <LoopForever>
  ldr   r0, =_estack
 80002e0:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80002e4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80002e8:	20000018 	.word	0x20000018
  ldr r2, =_sidata
 80002ec:	08000d38 	.word	0x08000d38
  ldr r2, =_sbss
 80002f0:	20000018 	.word	0x20000018
  ldr r4, =_ebss
 80002f4:	20000034 	.word	0x20000034

080002f8 <ADC_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80002f8:	e7fe      	b.n	80002f8 <ADC_IRQHandler>
	...

080002fc <GPIO_PeriClockControl>:
/* APIs that are supported by this driver */
/*
    Peripheral Clock Setup
*/
void GPIO_PeriClockControl(GPIO_RegDef_t *pGPIOx, uint8_t EnorDi)
{
 80002fc:	b480      	push	{r7}
 80002fe:	b083      	sub	sp, #12
 8000300:	af00      	add	r7, sp, #0
 8000302:	6078      	str	r0, [r7, #4]
 8000304:	460b      	mov	r3, r1
 8000306:	70fb      	strb	r3, [r7, #3]
    if(EnorDi == ENABLE)
 8000308:	78fb      	ldrb	r3, [r7, #3]
 800030a:	2b01      	cmp	r3, #1
 800030c:	d162      	bne.n	80003d4 <GPIO_PeriClockControl+0xd8>
    {
        if(pGPIOx == GPIOA)
 800030e:	687b      	ldr	r3, [r7, #4]
 8000310:	4a64      	ldr	r2, [pc, #400]	@ (80004a4 <GPIO_PeriClockControl+0x1a8>)
 8000312:	4293      	cmp	r3, r2
 8000314:	d106      	bne.n	8000324 <GPIO_PeriClockControl+0x28>
        {
            GPIOA_PCLK_EN();
 8000316:	4b64      	ldr	r3, [pc, #400]	@ (80004a8 <GPIO_PeriClockControl+0x1ac>)
 8000318:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800031a:	4a63      	ldr	r2, [pc, #396]	@ (80004a8 <GPIO_PeriClockControl+0x1ac>)
 800031c:	f043 0301 	orr.w	r3, r3, #1
 8000320:	6313      	str	r3, [r2, #48]	@ 0x30
        else if(pGPIOx == GPIOI)
        {
            GPIOI_PCLK_DI();
        }
    }
}
 8000322:	e0b9      	b.n	8000498 <GPIO_PeriClockControl+0x19c>
        else if(pGPIOx == GPIOB)
 8000324:	687b      	ldr	r3, [r7, #4]
 8000326:	4a61      	ldr	r2, [pc, #388]	@ (80004ac <GPIO_PeriClockControl+0x1b0>)
 8000328:	4293      	cmp	r3, r2
 800032a:	d106      	bne.n	800033a <GPIO_PeriClockControl+0x3e>
            GPIOB_PCLK_EN();
 800032c:	4b5e      	ldr	r3, [pc, #376]	@ (80004a8 <GPIO_PeriClockControl+0x1ac>)
 800032e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000330:	4a5d      	ldr	r2, [pc, #372]	@ (80004a8 <GPIO_PeriClockControl+0x1ac>)
 8000332:	f043 0302 	orr.w	r3, r3, #2
 8000336:	6313      	str	r3, [r2, #48]	@ 0x30
}
 8000338:	e0ae      	b.n	8000498 <GPIO_PeriClockControl+0x19c>
        else if(pGPIOx == GPIOC)
 800033a:	687b      	ldr	r3, [r7, #4]
 800033c:	4a5c      	ldr	r2, [pc, #368]	@ (80004b0 <GPIO_PeriClockControl+0x1b4>)
 800033e:	4293      	cmp	r3, r2
 8000340:	d106      	bne.n	8000350 <GPIO_PeriClockControl+0x54>
            GPIOC_PCLK_EN();
 8000342:	4b59      	ldr	r3, [pc, #356]	@ (80004a8 <GPIO_PeriClockControl+0x1ac>)
 8000344:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000346:	4a58      	ldr	r2, [pc, #352]	@ (80004a8 <GPIO_PeriClockControl+0x1ac>)
 8000348:	f043 0304 	orr.w	r3, r3, #4
 800034c:	6313      	str	r3, [r2, #48]	@ 0x30
}
 800034e:	e0a3      	b.n	8000498 <GPIO_PeriClockControl+0x19c>
        else if(pGPIOx == GPIOD)
 8000350:	687b      	ldr	r3, [r7, #4]
 8000352:	4a58      	ldr	r2, [pc, #352]	@ (80004b4 <GPIO_PeriClockControl+0x1b8>)
 8000354:	4293      	cmp	r3, r2
 8000356:	d106      	bne.n	8000366 <GPIO_PeriClockControl+0x6a>
            GPIOD_PCLK_EN();
 8000358:	4b53      	ldr	r3, [pc, #332]	@ (80004a8 <GPIO_PeriClockControl+0x1ac>)
 800035a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800035c:	4a52      	ldr	r2, [pc, #328]	@ (80004a8 <GPIO_PeriClockControl+0x1ac>)
 800035e:	f043 0308 	orr.w	r3, r3, #8
 8000362:	6313      	str	r3, [r2, #48]	@ 0x30
}
 8000364:	e098      	b.n	8000498 <GPIO_PeriClockControl+0x19c>
        else if(pGPIOx == GPIOE)
 8000366:	687b      	ldr	r3, [r7, #4]
 8000368:	4a53      	ldr	r2, [pc, #332]	@ (80004b8 <GPIO_PeriClockControl+0x1bc>)
 800036a:	4293      	cmp	r3, r2
 800036c:	d106      	bne.n	800037c <GPIO_PeriClockControl+0x80>
            GPIOE_PCLK_EN();
 800036e:	4b4e      	ldr	r3, [pc, #312]	@ (80004a8 <GPIO_PeriClockControl+0x1ac>)
 8000370:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000372:	4a4d      	ldr	r2, [pc, #308]	@ (80004a8 <GPIO_PeriClockControl+0x1ac>)
 8000374:	f043 0310 	orr.w	r3, r3, #16
 8000378:	6313      	str	r3, [r2, #48]	@ 0x30
}
 800037a:	e08d      	b.n	8000498 <GPIO_PeriClockControl+0x19c>
        else if(pGPIOx == GPIOF)
 800037c:	687b      	ldr	r3, [r7, #4]
 800037e:	4a4f      	ldr	r2, [pc, #316]	@ (80004bc <GPIO_PeriClockControl+0x1c0>)
 8000380:	4293      	cmp	r3, r2
 8000382:	d106      	bne.n	8000392 <GPIO_PeriClockControl+0x96>
            GPIOF_PCLK_EN();
 8000384:	4b48      	ldr	r3, [pc, #288]	@ (80004a8 <GPIO_PeriClockControl+0x1ac>)
 8000386:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000388:	4a47      	ldr	r2, [pc, #284]	@ (80004a8 <GPIO_PeriClockControl+0x1ac>)
 800038a:	f043 0320 	orr.w	r3, r3, #32
 800038e:	6313      	str	r3, [r2, #48]	@ 0x30
}
 8000390:	e082      	b.n	8000498 <GPIO_PeriClockControl+0x19c>
        else if(pGPIOx == GPIOG)
 8000392:	687b      	ldr	r3, [r7, #4]
 8000394:	4a4a      	ldr	r2, [pc, #296]	@ (80004c0 <GPIO_PeriClockControl+0x1c4>)
 8000396:	4293      	cmp	r3, r2
 8000398:	d106      	bne.n	80003a8 <GPIO_PeriClockControl+0xac>
            GPIOG_PCLK_EN();
 800039a:	4b43      	ldr	r3, [pc, #268]	@ (80004a8 <GPIO_PeriClockControl+0x1ac>)
 800039c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800039e:	4a42      	ldr	r2, [pc, #264]	@ (80004a8 <GPIO_PeriClockControl+0x1ac>)
 80003a0:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80003a4:	6313      	str	r3, [r2, #48]	@ 0x30
}
 80003a6:	e077      	b.n	8000498 <GPIO_PeriClockControl+0x19c>
        else if(pGPIOx == GPIOH)
 80003a8:	687b      	ldr	r3, [r7, #4]
 80003aa:	4a46      	ldr	r2, [pc, #280]	@ (80004c4 <GPIO_PeriClockControl+0x1c8>)
 80003ac:	4293      	cmp	r3, r2
 80003ae:	d106      	bne.n	80003be <GPIO_PeriClockControl+0xc2>
            GPIOH_PCLK_EN();
 80003b0:	4b3d      	ldr	r3, [pc, #244]	@ (80004a8 <GPIO_PeriClockControl+0x1ac>)
 80003b2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80003b4:	4a3c      	ldr	r2, [pc, #240]	@ (80004a8 <GPIO_PeriClockControl+0x1ac>)
 80003b6:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80003ba:	6313      	str	r3, [r2, #48]	@ 0x30
}
 80003bc:	e06c      	b.n	8000498 <GPIO_PeriClockControl+0x19c>
        else if(pGPIOx == GPIOI)
 80003be:	687b      	ldr	r3, [r7, #4]
 80003c0:	4a41      	ldr	r2, [pc, #260]	@ (80004c8 <GPIO_PeriClockControl+0x1cc>)
 80003c2:	4293      	cmp	r3, r2
 80003c4:	d168      	bne.n	8000498 <GPIO_PeriClockControl+0x19c>
            GPIOI_PCLK_EN();
 80003c6:	4b38      	ldr	r3, [pc, #224]	@ (80004a8 <GPIO_PeriClockControl+0x1ac>)
 80003c8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80003ca:	4a37      	ldr	r2, [pc, #220]	@ (80004a8 <GPIO_PeriClockControl+0x1ac>)
 80003cc:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80003d0:	6313      	str	r3, [r2, #48]	@ 0x30
}
 80003d2:	e061      	b.n	8000498 <GPIO_PeriClockControl+0x19c>
        if(pGPIOx == GPIOA)
 80003d4:	687b      	ldr	r3, [r7, #4]
 80003d6:	4a33      	ldr	r2, [pc, #204]	@ (80004a4 <GPIO_PeriClockControl+0x1a8>)
 80003d8:	4293      	cmp	r3, r2
 80003da:	d106      	bne.n	80003ea <GPIO_PeriClockControl+0xee>
            GPIOA_PCLK_DI();
 80003dc:	4b32      	ldr	r3, [pc, #200]	@ (80004a8 <GPIO_PeriClockControl+0x1ac>)
 80003de:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80003e0:	4a31      	ldr	r2, [pc, #196]	@ (80004a8 <GPIO_PeriClockControl+0x1ac>)
 80003e2:	f023 0301 	bic.w	r3, r3, #1
 80003e6:	6313      	str	r3, [r2, #48]	@ 0x30
}
 80003e8:	e056      	b.n	8000498 <GPIO_PeriClockControl+0x19c>
        else if(pGPIOx == GPIOB)
 80003ea:	687b      	ldr	r3, [r7, #4]
 80003ec:	4a2f      	ldr	r2, [pc, #188]	@ (80004ac <GPIO_PeriClockControl+0x1b0>)
 80003ee:	4293      	cmp	r3, r2
 80003f0:	d106      	bne.n	8000400 <GPIO_PeriClockControl+0x104>
            GPIOB_PCLK_DI();
 80003f2:	4b2d      	ldr	r3, [pc, #180]	@ (80004a8 <GPIO_PeriClockControl+0x1ac>)
 80003f4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80003f6:	4a2c      	ldr	r2, [pc, #176]	@ (80004a8 <GPIO_PeriClockControl+0x1ac>)
 80003f8:	f023 0302 	bic.w	r3, r3, #2
 80003fc:	6313      	str	r3, [r2, #48]	@ 0x30
}
 80003fe:	e04b      	b.n	8000498 <GPIO_PeriClockControl+0x19c>
        else if(pGPIOx == GPIOC)
 8000400:	687b      	ldr	r3, [r7, #4]
 8000402:	4a2b      	ldr	r2, [pc, #172]	@ (80004b0 <GPIO_PeriClockControl+0x1b4>)
 8000404:	4293      	cmp	r3, r2
 8000406:	d106      	bne.n	8000416 <GPIO_PeriClockControl+0x11a>
            GPIOC_PCLK_DI();
 8000408:	4b27      	ldr	r3, [pc, #156]	@ (80004a8 <GPIO_PeriClockControl+0x1ac>)
 800040a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800040c:	4a26      	ldr	r2, [pc, #152]	@ (80004a8 <GPIO_PeriClockControl+0x1ac>)
 800040e:	f023 0304 	bic.w	r3, r3, #4
 8000412:	6313      	str	r3, [r2, #48]	@ 0x30
}
 8000414:	e040      	b.n	8000498 <GPIO_PeriClockControl+0x19c>
        else if(pGPIOx == GPIOD)
 8000416:	687b      	ldr	r3, [r7, #4]
 8000418:	4a26      	ldr	r2, [pc, #152]	@ (80004b4 <GPIO_PeriClockControl+0x1b8>)
 800041a:	4293      	cmp	r3, r2
 800041c:	d106      	bne.n	800042c <GPIO_PeriClockControl+0x130>
            GPIOD_PCLK_DI();
 800041e:	4b22      	ldr	r3, [pc, #136]	@ (80004a8 <GPIO_PeriClockControl+0x1ac>)
 8000420:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000422:	4a21      	ldr	r2, [pc, #132]	@ (80004a8 <GPIO_PeriClockControl+0x1ac>)
 8000424:	f023 0308 	bic.w	r3, r3, #8
 8000428:	6313      	str	r3, [r2, #48]	@ 0x30
}
 800042a:	e035      	b.n	8000498 <GPIO_PeriClockControl+0x19c>
        else if(pGPIOx == GPIOE)
 800042c:	687b      	ldr	r3, [r7, #4]
 800042e:	4a22      	ldr	r2, [pc, #136]	@ (80004b8 <GPIO_PeriClockControl+0x1bc>)
 8000430:	4293      	cmp	r3, r2
 8000432:	d106      	bne.n	8000442 <GPIO_PeriClockControl+0x146>
            GPIOE_PCLK_DI();
 8000434:	4b1c      	ldr	r3, [pc, #112]	@ (80004a8 <GPIO_PeriClockControl+0x1ac>)
 8000436:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000438:	4a1b      	ldr	r2, [pc, #108]	@ (80004a8 <GPIO_PeriClockControl+0x1ac>)
 800043a:	f023 0310 	bic.w	r3, r3, #16
 800043e:	6313      	str	r3, [r2, #48]	@ 0x30
}
 8000440:	e02a      	b.n	8000498 <GPIO_PeriClockControl+0x19c>
        else if(pGPIOx == GPIOF)
 8000442:	687b      	ldr	r3, [r7, #4]
 8000444:	4a1d      	ldr	r2, [pc, #116]	@ (80004bc <GPIO_PeriClockControl+0x1c0>)
 8000446:	4293      	cmp	r3, r2
 8000448:	d106      	bne.n	8000458 <GPIO_PeriClockControl+0x15c>
            GPIOF_PCLK_DI();
 800044a:	4b17      	ldr	r3, [pc, #92]	@ (80004a8 <GPIO_PeriClockControl+0x1ac>)
 800044c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800044e:	4a16      	ldr	r2, [pc, #88]	@ (80004a8 <GPIO_PeriClockControl+0x1ac>)
 8000450:	f023 0320 	bic.w	r3, r3, #32
 8000454:	6313      	str	r3, [r2, #48]	@ 0x30
}
 8000456:	e01f      	b.n	8000498 <GPIO_PeriClockControl+0x19c>
        else if(pGPIOx == GPIOG)
 8000458:	687b      	ldr	r3, [r7, #4]
 800045a:	4a19      	ldr	r2, [pc, #100]	@ (80004c0 <GPIO_PeriClockControl+0x1c4>)
 800045c:	4293      	cmp	r3, r2
 800045e:	d106      	bne.n	800046e <GPIO_PeriClockControl+0x172>
            GPIOG_PCLK_DI();
 8000460:	4b11      	ldr	r3, [pc, #68]	@ (80004a8 <GPIO_PeriClockControl+0x1ac>)
 8000462:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000464:	4a10      	ldr	r2, [pc, #64]	@ (80004a8 <GPIO_PeriClockControl+0x1ac>)
 8000466:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800046a:	6313      	str	r3, [r2, #48]	@ 0x30
}
 800046c:	e014      	b.n	8000498 <GPIO_PeriClockControl+0x19c>
        else if(pGPIOx == GPIOH)
 800046e:	687b      	ldr	r3, [r7, #4]
 8000470:	4a14      	ldr	r2, [pc, #80]	@ (80004c4 <GPIO_PeriClockControl+0x1c8>)
 8000472:	4293      	cmp	r3, r2
 8000474:	d106      	bne.n	8000484 <GPIO_PeriClockControl+0x188>
            GPIOH_PCLK_DI();
 8000476:	4b0c      	ldr	r3, [pc, #48]	@ (80004a8 <GPIO_PeriClockControl+0x1ac>)
 8000478:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800047a:	4a0b      	ldr	r2, [pc, #44]	@ (80004a8 <GPIO_PeriClockControl+0x1ac>)
 800047c:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8000480:	6313      	str	r3, [r2, #48]	@ 0x30
}
 8000482:	e009      	b.n	8000498 <GPIO_PeriClockControl+0x19c>
        else if(pGPIOx == GPIOI)
 8000484:	687b      	ldr	r3, [r7, #4]
 8000486:	4a10      	ldr	r2, [pc, #64]	@ (80004c8 <GPIO_PeriClockControl+0x1cc>)
 8000488:	4293      	cmp	r3, r2
 800048a:	d105      	bne.n	8000498 <GPIO_PeriClockControl+0x19c>
            GPIOI_PCLK_DI();
 800048c:	4b06      	ldr	r3, [pc, #24]	@ (80004a8 <GPIO_PeriClockControl+0x1ac>)
 800048e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000490:	4a05      	ldr	r2, [pc, #20]	@ (80004a8 <GPIO_PeriClockControl+0x1ac>)
 8000492:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8000496:	6313      	str	r3, [r2, #48]	@ 0x30
}
 8000498:	bf00      	nop
 800049a:	370c      	adds	r7, #12
 800049c:	46bd      	mov	sp, r7
 800049e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80004a2:	4770      	bx	lr
 80004a4:	40020000 	.word	0x40020000
 80004a8:	40023800 	.word	0x40023800
 80004ac:	40020400 	.word	0x40020400
 80004b0:	40020800 	.word	0x40020800
 80004b4:	40020c00 	.word	0x40020c00
 80004b8:	40021000 	.word	0x40021000
 80004bc:	40021400 	.word	0x40021400
 80004c0:	40021800 	.word	0x40021800
 80004c4:	40021c00 	.word	0x40021c00
 80004c8:	40022000 	.word	0x40022000

080004cc <GPIO_Init>:

/*
    Init and De-Init
*/
void GPIO_Init(GPIO_Handle_t *pGPIOHandle)
{
 80004cc:	b580      	push	{r7, lr}
 80004ce:	b086      	sub	sp, #24
 80004d0:	af00      	add	r7, sp, #0
 80004d2:	6078      	str	r0, [r7, #4]
    uint32_t temp = 0;
 80004d4:	2300      	movs	r3, #0
 80004d6:	617b      	str	r3, [r7, #20]
    
    // Enable the clock, so that the user wouldn't have to enable it themselves.
    GPIO_PeriClockControl(pGPIOHandle->pGPIOx, ENABLE);
 80004d8:	687b      	ldr	r3, [r7, #4]
 80004da:	681b      	ldr	r3, [r3, #0]
 80004dc:	2101      	movs	r1, #1
 80004de:	4618      	mov	r0, r3
 80004e0:	f7ff ff0c 	bl	80002fc <GPIO_PeriClockControl>

    /* Configure the mode of gpio pin */
    if(pGPIOHandle->GPIO_PinConfig.GPIO_PinMode <= GPIO_MODE_ANALOG)
 80004e4:	687b      	ldr	r3, [r7, #4]
 80004e6:	795b      	ldrb	r3, [r3, #5]
 80004e8:	2b03      	cmp	r3, #3
 80004ea:	d821      	bhi.n	8000530 <GPIO_Init+0x64>
    {
        /* We take the GPIO config and pass it into the register */
        temp = ( pGPIOHandle->GPIO_PinConfig.GPIO_PinMode << (2 * pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber) );
 80004ec:	687b      	ldr	r3, [r7, #4]
 80004ee:	795b      	ldrb	r3, [r3, #5]
 80004f0:	461a      	mov	r2, r3
 80004f2:	687b      	ldr	r3, [r7, #4]
 80004f4:	791b      	ldrb	r3, [r3, #4]
 80004f6:	005b      	lsls	r3, r3, #1
 80004f8:	fa02 f303 	lsl.w	r3, r2, r3
 80004fc:	617b      	str	r3, [r7, #20]
        pGPIOHandle->pGPIOx->MODER &= ~( 0x3 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber ); /* Clearing */
 80004fe:	687b      	ldr	r3, [r7, #4]
 8000500:	681b      	ldr	r3, [r3, #0]
 8000502:	681a      	ldr	r2, [r3, #0]
 8000504:	687b      	ldr	r3, [r7, #4]
 8000506:	791b      	ldrb	r3, [r3, #4]
 8000508:	4619      	mov	r1, r3
 800050a:	2303      	movs	r3, #3
 800050c:	408b      	lsls	r3, r1
 800050e:	43db      	mvns	r3, r3
 8000510:	4619      	mov	r1, r3
 8000512:	687b      	ldr	r3, [r7, #4]
 8000514:	681b      	ldr	r3, [r3, #0]
 8000516:	400a      	ands	r2, r1
 8000518:	601a      	str	r2, [r3, #0]
        pGPIOHandle->pGPIOx->MODER |= temp; /* why ->? */
 800051a:	687b      	ldr	r3, [r7, #4]
 800051c:	681b      	ldr	r3, [r3, #0]
 800051e:	6819      	ldr	r1, [r3, #0]
 8000520:	687b      	ldr	r3, [r7, #4]
 8000522:	681b      	ldr	r3, [r3, #0]
 8000524:	697a      	ldr	r2, [r7, #20]
 8000526:	430a      	orrs	r2, r1
 8000528:	601a      	str	r2, [r3, #0]
        temp = 0;
 800052a:	2300      	movs	r3, #0
 800052c:	617b      	str	r3, [r7, #20]
 800052e:	e0ca      	b.n	80006c6 <GPIO_Init+0x1fa>
    }
    else
    {
        /* Configure registers */
        if(pGPIOHandle->GPIO_PinConfig.GPIO_PinMode == GPIO_MODE_IT_FT)
 8000530:	687b      	ldr	r3, [r7, #4]
 8000532:	795b      	ldrb	r3, [r3, #5]
 8000534:	2b04      	cmp	r3, #4
 8000536:	d117      	bne.n	8000568 <GPIO_Init+0x9c>
        {
            EXTI->FTSR |= (1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 8000538:	4b4a      	ldr	r3, [pc, #296]	@ (8000664 <GPIO_Init+0x198>)
 800053a:	68db      	ldr	r3, [r3, #12]
 800053c:	687a      	ldr	r2, [r7, #4]
 800053e:	7912      	ldrb	r2, [r2, #4]
 8000540:	4611      	mov	r1, r2
 8000542:	2201      	movs	r2, #1
 8000544:	408a      	lsls	r2, r1
 8000546:	4611      	mov	r1, r2
 8000548:	4a46      	ldr	r2, [pc, #280]	@ (8000664 <GPIO_Init+0x198>)
 800054a:	430b      	orrs	r3, r1
 800054c:	60d3      	str	r3, [r2, #12]
            EXTI->RTSR &= ~(1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 800054e:	4b45      	ldr	r3, [pc, #276]	@ (8000664 <GPIO_Init+0x198>)
 8000550:	689b      	ldr	r3, [r3, #8]
 8000552:	687a      	ldr	r2, [r7, #4]
 8000554:	7912      	ldrb	r2, [r2, #4]
 8000556:	4611      	mov	r1, r2
 8000558:	2201      	movs	r2, #1
 800055a:	408a      	lsls	r2, r1
 800055c:	43d2      	mvns	r2, r2
 800055e:	4611      	mov	r1, r2
 8000560:	4a40      	ldr	r2, [pc, #256]	@ (8000664 <GPIO_Init+0x198>)
 8000562:	400b      	ands	r3, r1
 8000564:	6093      	str	r3, [r2, #8]
 8000566:	e035      	b.n	80005d4 <GPIO_Init+0x108>
        }
        else if(pGPIOHandle->GPIO_PinConfig.GPIO_PinMode == GPIO_MODE_IT_RT)
 8000568:	687b      	ldr	r3, [r7, #4]
 800056a:	795b      	ldrb	r3, [r3, #5]
 800056c:	2b05      	cmp	r3, #5
 800056e:	d117      	bne.n	80005a0 <GPIO_Init+0xd4>
        {
            EXTI->RTSR |= (1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 8000570:	4b3c      	ldr	r3, [pc, #240]	@ (8000664 <GPIO_Init+0x198>)
 8000572:	689b      	ldr	r3, [r3, #8]
 8000574:	687a      	ldr	r2, [r7, #4]
 8000576:	7912      	ldrb	r2, [r2, #4]
 8000578:	4611      	mov	r1, r2
 800057a:	2201      	movs	r2, #1
 800057c:	408a      	lsls	r2, r1
 800057e:	4611      	mov	r1, r2
 8000580:	4a38      	ldr	r2, [pc, #224]	@ (8000664 <GPIO_Init+0x198>)
 8000582:	430b      	orrs	r3, r1
 8000584:	6093      	str	r3, [r2, #8]
            EXTI->FTSR &= ~(1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 8000586:	4b37      	ldr	r3, [pc, #220]	@ (8000664 <GPIO_Init+0x198>)
 8000588:	68db      	ldr	r3, [r3, #12]
 800058a:	687a      	ldr	r2, [r7, #4]
 800058c:	7912      	ldrb	r2, [r2, #4]
 800058e:	4611      	mov	r1, r2
 8000590:	2201      	movs	r2, #1
 8000592:	408a      	lsls	r2, r1
 8000594:	43d2      	mvns	r2, r2
 8000596:	4611      	mov	r1, r2
 8000598:	4a32      	ldr	r2, [pc, #200]	@ (8000664 <GPIO_Init+0x198>)
 800059a:	400b      	ands	r3, r1
 800059c:	60d3      	str	r3, [r2, #12]
 800059e:	e019      	b.n	80005d4 <GPIO_Init+0x108>
        }
        else if(pGPIOHandle->GPIO_PinConfig.GPIO_PinMode == GPIO_MODE_IT_RFT)
 80005a0:	687b      	ldr	r3, [r7, #4]
 80005a2:	795b      	ldrb	r3, [r3, #5]
 80005a4:	2b06      	cmp	r3, #6
 80005a6:	d115      	bne.n	80005d4 <GPIO_Init+0x108>
        {
            EXTI->RTSR |= (1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 80005a8:	4b2e      	ldr	r3, [pc, #184]	@ (8000664 <GPIO_Init+0x198>)
 80005aa:	689b      	ldr	r3, [r3, #8]
 80005ac:	687a      	ldr	r2, [r7, #4]
 80005ae:	7912      	ldrb	r2, [r2, #4]
 80005b0:	4611      	mov	r1, r2
 80005b2:	2201      	movs	r2, #1
 80005b4:	408a      	lsls	r2, r1
 80005b6:	4611      	mov	r1, r2
 80005b8:	4a2a      	ldr	r2, [pc, #168]	@ (8000664 <GPIO_Init+0x198>)
 80005ba:	430b      	orrs	r3, r1
 80005bc:	6093      	str	r3, [r2, #8]
            EXTI->FTSR |= (1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 80005be:	4b29      	ldr	r3, [pc, #164]	@ (8000664 <GPIO_Init+0x198>)
 80005c0:	68db      	ldr	r3, [r3, #12]
 80005c2:	687a      	ldr	r2, [r7, #4]
 80005c4:	7912      	ldrb	r2, [r2, #4]
 80005c6:	4611      	mov	r1, r2
 80005c8:	2201      	movs	r2, #1
 80005ca:	408a      	lsls	r2, r1
 80005cc:	4611      	mov	r1, r2
 80005ce:	4a25      	ldr	r2, [pc, #148]	@ (8000664 <GPIO_Init+0x198>)
 80005d0:	430b      	orrs	r3, r1
 80005d2:	60d3      	str	r3, [r2, #12]
        }

        /* 2. configure the GPIO port selection in SYSCFG_EXTICR */
        uint8_t temp1 = pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber / 4;
 80005d4:	687b      	ldr	r3, [r7, #4]
 80005d6:	791b      	ldrb	r3, [r3, #4]
 80005d8:	089b      	lsrs	r3, r3, #2
 80005da:	74fb      	strb	r3, [r7, #19]
        uint8_t temp2 = pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber % 4;
 80005dc:	687b      	ldr	r3, [r7, #4]
 80005de:	791b      	ldrb	r3, [r3, #4]
 80005e0:	f003 0303 	and.w	r3, r3, #3
 80005e4:	74bb      	strb	r3, [r7, #18]
        uint8_t portcode = GPIO_BASEADDR_TO_CODE(pGPIOHandle->pGPIOx);
 80005e6:	687b      	ldr	r3, [r7, #4]
 80005e8:	681b      	ldr	r3, [r3, #0]
 80005ea:	4a1f      	ldr	r2, [pc, #124]	@ (8000668 <GPIO_Init+0x19c>)
 80005ec:	4293      	cmp	r3, r2
 80005ee:	d04d      	beq.n	800068c <GPIO_Init+0x1c0>
 80005f0:	687b      	ldr	r3, [r7, #4]
 80005f2:	681b      	ldr	r3, [r3, #0]
 80005f4:	4a1d      	ldr	r2, [pc, #116]	@ (800066c <GPIO_Init+0x1a0>)
 80005f6:	4293      	cmp	r3, r2
 80005f8:	d032      	beq.n	8000660 <GPIO_Init+0x194>
 80005fa:	687b      	ldr	r3, [r7, #4]
 80005fc:	681b      	ldr	r3, [r3, #0]
 80005fe:	4a1c      	ldr	r2, [pc, #112]	@ (8000670 <GPIO_Init+0x1a4>)
 8000600:	4293      	cmp	r3, r2
 8000602:	d02b      	beq.n	800065c <GPIO_Init+0x190>
 8000604:	687b      	ldr	r3, [r7, #4]
 8000606:	681b      	ldr	r3, [r3, #0]
 8000608:	4a1a      	ldr	r2, [pc, #104]	@ (8000674 <GPIO_Init+0x1a8>)
 800060a:	4293      	cmp	r3, r2
 800060c:	d024      	beq.n	8000658 <GPIO_Init+0x18c>
 800060e:	687b      	ldr	r3, [r7, #4]
 8000610:	681b      	ldr	r3, [r3, #0]
 8000612:	4a19      	ldr	r2, [pc, #100]	@ (8000678 <GPIO_Init+0x1ac>)
 8000614:	4293      	cmp	r3, r2
 8000616:	d01d      	beq.n	8000654 <GPIO_Init+0x188>
 8000618:	687b      	ldr	r3, [r7, #4]
 800061a:	681b      	ldr	r3, [r3, #0]
 800061c:	4a17      	ldr	r2, [pc, #92]	@ (800067c <GPIO_Init+0x1b0>)
 800061e:	4293      	cmp	r3, r2
 8000620:	d016      	beq.n	8000650 <GPIO_Init+0x184>
 8000622:	687b      	ldr	r3, [r7, #4]
 8000624:	681b      	ldr	r3, [r3, #0]
 8000626:	4a16      	ldr	r2, [pc, #88]	@ (8000680 <GPIO_Init+0x1b4>)
 8000628:	4293      	cmp	r3, r2
 800062a:	d00f      	beq.n	800064c <GPIO_Init+0x180>
 800062c:	687b      	ldr	r3, [r7, #4]
 800062e:	681b      	ldr	r3, [r3, #0]
 8000630:	4a14      	ldr	r2, [pc, #80]	@ (8000684 <GPIO_Init+0x1b8>)
 8000632:	4293      	cmp	r3, r2
 8000634:	d008      	beq.n	8000648 <GPIO_Init+0x17c>
 8000636:	687b      	ldr	r3, [r7, #4]
 8000638:	681b      	ldr	r3, [r3, #0]
 800063a:	4a13      	ldr	r2, [pc, #76]	@ (8000688 <GPIO_Init+0x1bc>)
 800063c:	4293      	cmp	r3, r2
 800063e:	d101      	bne.n	8000644 <GPIO_Init+0x178>
 8000640:	2308      	movs	r3, #8
 8000642:	e024      	b.n	800068e <GPIO_Init+0x1c2>
 8000644:	2300      	movs	r3, #0
 8000646:	e022      	b.n	800068e <GPIO_Init+0x1c2>
 8000648:	2307      	movs	r3, #7
 800064a:	e020      	b.n	800068e <GPIO_Init+0x1c2>
 800064c:	2306      	movs	r3, #6
 800064e:	e01e      	b.n	800068e <GPIO_Init+0x1c2>
 8000650:	2305      	movs	r3, #5
 8000652:	e01c      	b.n	800068e <GPIO_Init+0x1c2>
 8000654:	2304      	movs	r3, #4
 8000656:	e01a      	b.n	800068e <GPIO_Init+0x1c2>
 8000658:	2303      	movs	r3, #3
 800065a:	e018      	b.n	800068e <GPIO_Init+0x1c2>
 800065c:	2302      	movs	r3, #2
 800065e:	e016      	b.n	800068e <GPIO_Init+0x1c2>
 8000660:	2301      	movs	r3, #1
 8000662:	e014      	b.n	800068e <GPIO_Init+0x1c2>
 8000664:	40013c00 	.word	0x40013c00
 8000668:	40020000 	.word	0x40020000
 800066c:	40020400 	.word	0x40020400
 8000670:	40020800 	.word	0x40020800
 8000674:	40020c00 	.word	0x40020c00
 8000678:	40021000 	.word	0x40021000
 800067c:	40021400 	.word	0x40021400
 8000680:	40021800 	.word	0x40021800
 8000684:	40021c00 	.word	0x40021c00
 8000688:	40022000 	.word	0x40022000
 800068c:	2300      	movs	r3, #0
 800068e:	747b      	strb	r3, [r7, #17]
        SYSCFG_PCLK_EN();
 8000690:	4b5c      	ldr	r3, [pc, #368]	@ (8000804 <GPIO_Init+0x338>)
 8000692:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000694:	4a5b      	ldr	r2, [pc, #364]	@ (8000804 <GPIO_Init+0x338>)
 8000696:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800069a:	6453      	str	r3, [r2, #68]	@ 0x44
        SYSCFG->EXTICR[temp1] = portcode << (temp2 * 4);
 800069c:	7c7a      	ldrb	r2, [r7, #17]
 800069e:	7cbb      	ldrb	r3, [r7, #18]
 80006a0:	009b      	lsls	r3, r3, #2
 80006a2:	fa02 f103 	lsl.w	r1, r2, r3
 80006a6:	4a58      	ldr	r2, [pc, #352]	@ (8000808 <GPIO_Init+0x33c>)
 80006a8:	7cfb      	ldrb	r3, [r7, #19]
 80006aa:	3302      	adds	r3, #2
 80006ac:	f842 1023 	str.w	r1, [r2, r3, lsl #2]

        /* 3. enable the exti interrupt delivery using IMR */
        EXTI->IMR |= 1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber;
 80006b0:	4b56      	ldr	r3, [pc, #344]	@ (800080c <GPIO_Init+0x340>)
 80006b2:	681b      	ldr	r3, [r3, #0]
 80006b4:	687a      	ldr	r2, [r7, #4]
 80006b6:	7912      	ldrb	r2, [r2, #4]
 80006b8:	4611      	mov	r1, r2
 80006ba:	2201      	movs	r2, #1
 80006bc:	408a      	lsls	r2, r1
 80006be:	4611      	mov	r1, r2
 80006c0:	4a52      	ldr	r2, [pc, #328]	@ (800080c <GPIO_Init+0x340>)
 80006c2:	430b      	orrs	r3, r1
 80006c4:	6013      	str	r3, [r2, #0]

    }

    temp = 0;
 80006c6:	2300      	movs	r3, #0
 80006c8:	617b      	str	r3, [r7, #20]

    /* Configure the speed */
    temp = ( pGPIOHandle->GPIO_PinConfig.GPIO_PinSpeed << ( 2 * pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber) );
 80006ca:	687b      	ldr	r3, [r7, #4]
 80006cc:	799b      	ldrb	r3, [r3, #6]
 80006ce:	461a      	mov	r2, r3
 80006d0:	687b      	ldr	r3, [r7, #4]
 80006d2:	791b      	ldrb	r3, [r3, #4]
 80006d4:	005b      	lsls	r3, r3, #1
 80006d6:	fa02 f303 	lsl.w	r3, r2, r3
 80006da:	617b      	str	r3, [r7, #20]
    pGPIOHandle->pGPIOx->OSPEEDR &= ~( 0x3 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber ); /* Clearing */
 80006dc:	687b      	ldr	r3, [r7, #4]
 80006de:	681b      	ldr	r3, [r3, #0]
 80006e0:	689a      	ldr	r2, [r3, #8]
 80006e2:	687b      	ldr	r3, [r7, #4]
 80006e4:	791b      	ldrb	r3, [r3, #4]
 80006e6:	4619      	mov	r1, r3
 80006e8:	2303      	movs	r3, #3
 80006ea:	408b      	lsls	r3, r1
 80006ec:	43db      	mvns	r3, r3
 80006ee:	4619      	mov	r1, r3
 80006f0:	687b      	ldr	r3, [r7, #4]
 80006f2:	681b      	ldr	r3, [r3, #0]
 80006f4:	400a      	ands	r2, r1
 80006f6:	609a      	str	r2, [r3, #8]
    pGPIOHandle->pGPIOx->OSPEEDR |= temp;
 80006f8:	687b      	ldr	r3, [r7, #4]
 80006fa:	681b      	ldr	r3, [r3, #0]
 80006fc:	6899      	ldr	r1, [r3, #8]
 80006fe:	687b      	ldr	r3, [r7, #4]
 8000700:	681b      	ldr	r3, [r3, #0]
 8000702:	697a      	ldr	r2, [r7, #20]
 8000704:	430a      	orrs	r2, r1
 8000706:	609a      	str	r2, [r3, #8]

    temp = 0;
 8000708:	2300      	movs	r3, #0
 800070a:	617b      	str	r3, [r7, #20]

    /* Configure pupd settings */
    temp = ( pGPIOHandle->GPIO_PinConfig.GPIO_PinPuPdControl << ( 2 * pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber) );
 800070c:	687b      	ldr	r3, [r7, #4]
 800070e:	79db      	ldrb	r3, [r3, #7]
 8000710:	461a      	mov	r2, r3
 8000712:	687b      	ldr	r3, [r7, #4]
 8000714:	791b      	ldrb	r3, [r3, #4]
 8000716:	005b      	lsls	r3, r3, #1
 8000718:	fa02 f303 	lsl.w	r3, r2, r3
 800071c:	617b      	str	r3, [r7, #20]
    pGPIOHandle->pGPIOx->PUPDR &= ~( 0x3 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber ); /* Clearing */
 800071e:	687b      	ldr	r3, [r7, #4]
 8000720:	681b      	ldr	r3, [r3, #0]
 8000722:	68da      	ldr	r2, [r3, #12]
 8000724:	687b      	ldr	r3, [r7, #4]
 8000726:	791b      	ldrb	r3, [r3, #4]
 8000728:	4619      	mov	r1, r3
 800072a:	2303      	movs	r3, #3
 800072c:	408b      	lsls	r3, r1
 800072e:	43db      	mvns	r3, r3
 8000730:	4619      	mov	r1, r3
 8000732:	687b      	ldr	r3, [r7, #4]
 8000734:	681b      	ldr	r3, [r3, #0]
 8000736:	400a      	ands	r2, r1
 8000738:	60da      	str	r2, [r3, #12]
    pGPIOHandle->pGPIOx->PUPDR |= temp;
 800073a:	687b      	ldr	r3, [r7, #4]
 800073c:	681b      	ldr	r3, [r3, #0]
 800073e:	68d9      	ldr	r1, [r3, #12]
 8000740:	687b      	ldr	r3, [r7, #4]
 8000742:	681b      	ldr	r3, [r3, #0]
 8000744:	697a      	ldr	r2, [r7, #20]
 8000746:	430a      	orrs	r2, r1
 8000748:	60da      	str	r2, [r3, #12]

    temp = 0;
 800074a:	2300      	movs	r3, #0
 800074c:	617b      	str	r3, [r7, #20]

    /* Configure output type */
    temp = ( pGPIOHandle->GPIO_PinConfig.GPIO_PinOPType << ( pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber) );
 800074e:	687b      	ldr	r3, [r7, #4]
 8000750:	7a1b      	ldrb	r3, [r3, #8]
 8000752:	461a      	mov	r2, r3
 8000754:	687b      	ldr	r3, [r7, #4]
 8000756:	791b      	ldrb	r3, [r3, #4]
 8000758:	fa02 f303 	lsl.w	r3, r2, r3
 800075c:	617b      	str	r3, [r7, #20]
    pGPIOHandle->pGPIOx->OTYPER &= ~( 0x1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber ); /* Clearing */
 800075e:	687b      	ldr	r3, [r7, #4]
 8000760:	681b      	ldr	r3, [r3, #0]
 8000762:	685a      	ldr	r2, [r3, #4]
 8000764:	687b      	ldr	r3, [r7, #4]
 8000766:	791b      	ldrb	r3, [r3, #4]
 8000768:	4619      	mov	r1, r3
 800076a:	2301      	movs	r3, #1
 800076c:	408b      	lsls	r3, r1
 800076e:	43db      	mvns	r3, r3
 8000770:	4619      	mov	r1, r3
 8000772:	687b      	ldr	r3, [r7, #4]
 8000774:	681b      	ldr	r3, [r3, #0]
 8000776:	400a      	ands	r2, r1
 8000778:	605a      	str	r2, [r3, #4]
    pGPIOHandle->pGPIOx->OTYPER |= temp;
 800077a:	687b      	ldr	r3, [r7, #4]
 800077c:	681b      	ldr	r3, [r3, #0]
 800077e:	6859      	ldr	r1, [r3, #4]
 8000780:	687b      	ldr	r3, [r7, #4]
 8000782:	681b      	ldr	r3, [r3, #0]
 8000784:	697a      	ldr	r2, [r7, #20]
 8000786:	430a      	orrs	r2, r1
 8000788:	605a      	str	r2, [r3, #4]

    temp = 0;
 800078a:	2300      	movs	r3, #0
 800078c:	617b      	str	r3, [r7, #20]

    /* Configure the alternate functionality */
    if(pGPIOHandle->GPIO_PinConfig.GPIO_PinMode == GPIO_MODE_ALTFN)
 800078e:	687b      	ldr	r3, [r7, #4]
 8000790:	795b      	ldrb	r3, [r3, #5]
 8000792:	2b02      	cmp	r3, #2
 8000794:	d131      	bne.n	80007fa <GPIO_Init+0x32e>
    {
        uint8_t temp1, temp2;

        temp1 = pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber / 8; /* Gets which AFR element is being used */
 8000796:	687b      	ldr	r3, [r7, #4]
 8000798:	791b      	ldrb	r3, [r3, #4]
 800079a:	08db      	lsrs	r3, r3, #3
 800079c:	743b      	strb	r3, [r7, #16]
        temp2 = pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber % 8; /* Gets which pin in the AFR element is being used */
 800079e:	687b      	ldr	r3, [r7, #4]
 80007a0:	791b      	ldrb	r3, [r3, #4]
 80007a2:	f003 0307 	and.w	r3, r3, #7
 80007a6:	73fb      	strb	r3, [r7, #15]
        pGPIOHandle->pGPIOx->AFR[temp1] &= ~( 0xF << ( 4 * temp2 ) ); /* Clearing */
 80007a8:	687b      	ldr	r3, [r7, #4]
 80007aa:	681b      	ldr	r3, [r3, #0]
 80007ac:	7c3a      	ldrb	r2, [r7, #16]
 80007ae:	3208      	adds	r2, #8
 80007b0:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80007b4:	7bfb      	ldrb	r3, [r7, #15]
 80007b6:	009b      	lsls	r3, r3, #2
 80007b8:	220f      	movs	r2, #15
 80007ba:	fa02 f303 	lsl.w	r3, r2, r3
 80007be:	43db      	mvns	r3, r3
 80007c0:	4618      	mov	r0, r3
 80007c2:	687b      	ldr	r3, [r7, #4]
 80007c4:	681b      	ldr	r3, [r3, #0]
 80007c6:	7c3a      	ldrb	r2, [r7, #16]
 80007c8:	4001      	ands	r1, r0
 80007ca:	3208      	adds	r2, #8
 80007cc:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
        pGPIOHandle->pGPIOx->AFR[temp1] |= ( pGPIOHandle->GPIO_PinConfig.GPIO_PinAltFunMode << ( 4 * temp2 ) );
 80007d0:	687b      	ldr	r3, [r7, #4]
 80007d2:	681b      	ldr	r3, [r3, #0]
 80007d4:	7c3a      	ldrb	r2, [r7, #16]
 80007d6:	3208      	adds	r2, #8
 80007d8:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80007dc:	687b      	ldr	r3, [r7, #4]
 80007de:	7a5b      	ldrb	r3, [r3, #9]
 80007e0:	461a      	mov	r2, r3
 80007e2:	7bfb      	ldrb	r3, [r7, #15]
 80007e4:	009b      	lsls	r3, r3, #2
 80007e6:	fa02 f303 	lsl.w	r3, r2, r3
 80007ea:	4618      	mov	r0, r3
 80007ec:	687b      	ldr	r3, [r7, #4]
 80007ee:	681b      	ldr	r3, [r3, #0]
 80007f0:	7c3a      	ldrb	r2, [r7, #16]
 80007f2:	4301      	orrs	r1, r0
 80007f4:	3208      	adds	r2, #8
 80007f6:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    }

}
 80007fa:	bf00      	nop
 80007fc:	3718      	adds	r7, #24
 80007fe:	46bd      	mov	sp, r7
 8000800:	bd80      	pop	{r7, pc}
 8000802:	bf00      	nop
 8000804:	40023800 	.word	0x40023800
 8000808:	40013800 	.word	0x40013800
 800080c:	40013c00 	.word	0x40013c00

08000810 <I2C_ClearADDRFlag>:
{
    pI2Cx->CR1 |= (1 << I2C_CR1_START);
}

static void I2C_ClearADDRFlag(I2C_Handle_t *pI2CHandle)
{
 8000810:	b580      	push	{r7, lr}
 8000812:	b084      	sub	sp, #16
 8000814:	af00      	add	r7, sp, #0
 8000816:	6078      	str	r0, [r7, #4]
    uint32_t dummy_read;
    // Check the device mode
    if (pI2CHandle->pI2Cx->SR2 & (1 << I2C_SR2_MSL))
 8000818:	687b      	ldr	r3, [r7, #4]
 800081a:	681b      	ldr	r3, [r3, #0]
 800081c:	699b      	ldr	r3, [r3, #24]
 800081e:	f003 0301 	and.w	r3, r3, #1
 8000822:	2b00      	cmp	r3, #0
 8000824:	d01f      	beq.n	8000866 <I2C_ClearADDRFlag+0x56>
    {
        // device is in controller mode
        if (pI2CHandle->TxRxState == I2C_BUSY_IN_RX)
 8000826:	687b      	ldr	r3, [r7, #4]
 8000828:	7f1b      	ldrb	r3, [r3, #28]
 800082a:	2b01      	cmp	r3, #1
 800082c:	d112      	bne.n	8000854 <I2C_ClearADDRFlag+0x44>
        {
            if (pI2CHandle->RxSize == 1)
 800082e:	687b      	ldr	r3, [r7, #4]
 8000830:	6a1b      	ldr	r3, [r3, #32]
 8000832:	2b01      	cmp	r3, #1
 8000834:	d11f      	bne.n	8000876 <I2C_ClearADDRFlag+0x66>
            {
                // first disable the ack
                I2C_ManageACKing(pI2CHandle->pI2Cx, DISABLE);
 8000836:	687b      	ldr	r3, [r7, #4]
 8000838:	681b      	ldr	r3, [r3, #0]
 800083a:	2100      	movs	r1, #0
 800083c:	4618      	mov	r0, r3
 800083e:	f000 f965 	bl	8000b0c <I2C_ManageACKing>

                // clear the ADDR flag
                dummy_read = pI2CHandle->pI2Cx->SR1;
 8000842:	687b      	ldr	r3, [r7, #4]
 8000844:	681b      	ldr	r3, [r3, #0]
 8000846:	695b      	ldr	r3, [r3, #20]
 8000848:	60fb      	str	r3, [r7, #12]
                dummy_read = pI2CHandle->pI2Cx->SR2;
 800084a:	687b      	ldr	r3, [r7, #4]
 800084c:	681b      	ldr	r3, [r3, #0]
 800084e:	699b      	ldr	r3, [r3, #24]
 8000850:	60fb      	str	r3, [r7, #12]
        // clear the addr flag ( read sr1, read sr2 )
        dummy_read = pI2CHandle->pI2Cx->SR1;
        dummy_read = pI2CHandle->pI2Cx->SR2;
        (void)dummy_read;
    }
}
 8000852:	e010      	b.n	8000876 <I2C_ClearADDRFlag+0x66>
            dummy_read = pI2CHandle->pI2Cx->SR1;
 8000854:	687b      	ldr	r3, [r7, #4]
 8000856:	681b      	ldr	r3, [r3, #0]
 8000858:	695b      	ldr	r3, [r3, #20]
 800085a:	60fb      	str	r3, [r7, #12]
            dummy_read = pI2CHandle->pI2Cx->SR2;
 800085c:	687b      	ldr	r3, [r7, #4]
 800085e:	681b      	ldr	r3, [r3, #0]
 8000860:	699b      	ldr	r3, [r3, #24]
 8000862:	60fb      	str	r3, [r7, #12]
}
 8000864:	e007      	b.n	8000876 <I2C_ClearADDRFlag+0x66>
        dummy_read = pI2CHandle->pI2Cx->SR1;
 8000866:	687b      	ldr	r3, [r7, #4]
 8000868:	681b      	ldr	r3, [r3, #0]
 800086a:	695b      	ldr	r3, [r3, #20]
 800086c:	60fb      	str	r3, [r7, #12]
        dummy_read = pI2CHandle->pI2Cx->SR2;
 800086e:	687b      	ldr	r3, [r7, #4]
 8000870:	681b      	ldr	r3, [r3, #0]
 8000872:	699b      	ldr	r3, [r3, #24]
 8000874:	60fb      	str	r3, [r7, #12]
}
 8000876:	bf00      	nop
 8000878:	3710      	adds	r7, #16
 800087a:	46bd      	mov	sp, r7
 800087c:	bd80      	pop	{r7, pc}

0800087e <I2C_GenerateStopCondition>:

void I2C_GenerateStopCondition(I2C_RegDef_t *pI2Cx)
{
 800087e:	b480      	push	{r7}
 8000880:	b083      	sub	sp, #12
 8000882:	af00      	add	r7, sp, #0
 8000884:	6078      	str	r0, [r7, #4]
    pI2Cx->CR1 |= (1 << I2C_CR1_STOP);
 8000886:	687b      	ldr	r3, [r7, #4]
 8000888:	681b      	ldr	r3, [r3, #0]
 800088a:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 800088e:	687b      	ldr	r3, [r7, #4]
 8000890:	601a      	str	r2, [r3, #0]
}
 8000892:	bf00      	nop
 8000894:	370c      	adds	r7, #12
 8000896:	46bd      	mov	sp, r7
 8000898:	f85d 7b04 	ldr.w	r7, [sp], #4
 800089c:	4770      	bx	lr
	...

080008a0 <I2C_PeriClockControl>:
        pI2Cx->CR2 &= ~(1 << I2C_CR2_ITERREN);
    }
}

void I2C_PeriClockControl(I2C_RegDef_t *pI2Cx, uint8_t EnorDi)
{
 80008a0:	b480      	push	{r7}
 80008a2:	b083      	sub	sp, #12
 80008a4:	af00      	add	r7, sp, #0
 80008a6:	6078      	str	r0, [r7, #4]
 80008a8:	460b      	mov	r3, r1
 80008aa:	70fb      	strb	r3, [r7, #3]
    if (EnorDi == ENABLE)
 80008ac:	78fb      	ldrb	r3, [r7, #3]
 80008ae:	2b01      	cmp	r3, #1
 80008b0:	d120      	bne.n	80008f4 <I2C_PeriClockControl+0x54>
    {
        if (pI2Cx == I2C1)
 80008b2:	687b      	ldr	r3, [r7, #4]
 80008b4:	4a22      	ldr	r2, [pc, #136]	@ (8000940 <I2C_PeriClockControl+0xa0>)
 80008b6:	4293      	cmp	r3, r2
 80008b8:	d106      	bne.n	80008c8 <I2C_PeriClockControl+0x28>
        {
            I2C1_PCLK_EN();
 80008ba:	4b22      	ldr	r3, [pc, #136]	@ (8000944 <I2C_PeriClockControl+0xa4>)
 80008bc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80008be:	4a21      	ldr	r2, [pc, #132]	@ (8000944 <I2C_PeriClockControl+0xa4>)
 80008c0:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 80008c4:	6413      	str	r3, [r2, #64]	@ 0x40
        else if (pI2Cx == I2C3)
        {
            I2C3_PCLK_DI();
        }
    }
}
 80008c6:	e035      	b.n	8000934 <I2C_PeriClockControl+0x94>
        else if (pI2Cx == I2C2)
 80008c8:	687b      	ldr	r3, [r7, #4]
 80008ca:	4a1f      	ldr	r2, [pc, #124]	@ (8000948 <I2C_PeriClockControl+0xa8>)
 80008cc:	4293      	cmp	r3, r2
 80008ce:	d106      	bne.n	80008de <I2C_PeriClockControl+0x3e>
            I2C2_PCLK_EN();
 80008d0:	4b1c      	ldr	r3, [pc, #112]	@ (8000944 <I2C_PeriClockControl+0xa4>)
 80008d2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80008d4:	4a1b      	ldr	r2, [pc, #108]	@ (8000944 <I2C_PeriClockControl+0xa4>)
 80008d6:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 80008da:	6413      	str	r3, [r2, #64]	@ 0x40
}
 80008dc:	e02a      	b.n	8000934 <I2C_PeriClockControl+0x94>
        else if (pI2Cx == I2C3)
 80008de:	687b      	ldr	r3, [r7, #4]
 80008e0:	4a1a      	ldr	r2, [pc, #104]	@ (800094c <I2C_PeriClockControl+0xac>)
 80008e2:	4293      	cmp	r3, r2
 80008e4:	d126      	bne.n	8000934 <I2C_PeriClockControl+0x94>
            I2C3_PCLK_EN();
 80008e6:	4b17      	ldr	r3, [pc, #92]	@ (8000944 <I2C_PeriClockControl+0xa4>)
 80008e8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80008ea:	4a16      	ldr	r2, [pc, #88]	@ (8000944 <I2C_PeriClockControl+0xa4>)
 80008ec:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 80008f0:	6413      	str	r3, [r2, #64]	@ 0x40
}
 80008f2:	e01f      	b.n	8000934 <I2C_PeriClockControl+0x94>
        if (pI2Cx == I2C1)
 80008f4:	687b      	ldr	r3, [r7, #4]
 80008f6:	4a12      	ldr	r2, [pc, #72]	@ (8000940 <I2C_PeriClockControl+0xa0>)
 80008f8:	4293      	cmp	r3, r2
 80008fa:	d106      	bne.n	800090a <I2C_PeriClockControl+0x6a>
            I2C1_PCLK_DI();
 80008fc:	4b11      	ldr	r3, [pc, #68]	@ (8000944 <I2C_PeriClockControl+0xa4>)
 80008fe:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000900:	4a10      	ldr	r2, [pc, #64]	@ (8000944 <I2C_PeriClockControl+0xa4>)
 8000902:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8000906:	6413      	str	r3, [r2, #64]	@ 0x40
}
 8000908:	e014      	b.n	8000934 <I2C_PeriClockControl+0x94>
        else if (pI2Cx == I2C2)
 800090a:	687b      	ldr	r3, [r7, #4]
 800090c:	4a0e      	ldr	r2, [pc, #56]	@ (8000948 <I2C_PeriClockControl+0xa8>)
 800090e:	4293      	cmp	r3, r2
 8000910:	d106      	bne.n	8000920 <I2C_PeriClockControl+0x80>
            I2C2_PCLK_DI();
 8000912:	4b0c      	ldr	r3, [pc, #48]	@ (8000944 <I2C_PeriClockControl+0xa4>)
 8000914:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000916:	4a0b      	ldr	r2, [pc, #44]	@ (8000944 <I2C_PeriClockControl+0xa4>)
 8000918:	f423 0380 	bic.w	r3, r3, #4194304	@ 0x400000
 800091c:	6413      	str	r3, [r2, #64]	@ 0x40
}
 800091e:	e009      	b.n	8000934 <I2C_PeriClockControl+0x94>
        else if (pI2Cx == I2C3)
 8000920:	687b      	ldr	r3, [r7, #4]
 8000922:	4a0a      	ldr	r2, [pc, #40]	@ (800094c <I2C_PeriClockControl+0xac>)
 8000924:	4293      	cmp	r3, r2
 8000926:	d105      	bne.n	8000934 <I2C_PeriClockControl+0x94>
            I2C3_PCLK_DI();
 8000928:	4b06      	ldr	r3, [pc, #24]	@ (8000944 <I2C_PeriClockControl+0xa4>)
 800092a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800092c:	4a05      	ldr	r2, [pc, #20]	@ (8000944 <I2C_PeriClockControl+0xa4>)
 800092e:	f423 0300 	bic.w	r3, r3, #8388608	@ 0x800000
 8000932:	6413      	str	r3, [r2, #64]	@ 0x40
}
 8000934:	bf00      	nop
 8000936:	370c      	adds	r7, #12
 8000938:	46bd      	mov	sp, r7
 800093a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800093e:	4770      	bx	lr
 8000940:	40005400 	.word	0x40005400
 8000944:	40023800 	.word	0x40023800
 8000948:	40005800 	.word	0x40005800
 800094c:	40005c00 	.word	0x40005c00

08000950 <I2C_Init>:

void I2C_Init(I2C_Handle_t *pI2CHandle)
{
 8000950:	b580      	push	{r7, lr}
 8000952:	b084      	sub	sp, #16
 8000954:	af00      	add	r7, sp, #0
 8000956:	6078      	str	r0, [r7, #4]
    uint32_t tempreg = 0;
 8000958:	2300      	movs	r3, #0
 800095a:	60fb      	str	r3, [r7, #12]

    I2C_PeriClockControl(I2C1, ENABLE);
 800095c:	2101      	movs	r1, #1
 800095e:	4850      	ldr	r0, [pc, #320]	@ (8000aa0 <I2C_Init+0x150>)
 8000960:	f7ff ff9e 	bl	80008a0 <I2C_PeriClockControl>

    // ACK control bit (CR1)
    tempreg = 0;
 8000964:	2300      	movs	r3, #0
 8000966:	60fb      	str	r3, [r7, #12]
    tempreg |= (pI2CHandle->I2C_Config.I2C_ACKControl << 10);
 8000968:	687b      	ldr	r3, [r7, #4]
 800096a:	7a5b      	ldrb	r3, [r3, #9]
 800096c:	029b      	lsls	r3, r3, #10
 800096e:	68fa      	ldr	r2, [r7, #12]
 8000970:	4313      	orrs	r3, r2
 8000972:	60fb      	str	r3, [r7, #12]
    pI2CHandle->pI2Cx->CR1 = tempreg;
 8000974:	687b      	ldr	r3, [r7, #4]
 8000976:	681b      	ldr	r3, [r3, #0]
 8000978:	68fa      	ldr	r2, [r7, #12]
 800097a:	601a      	str	r2, [r3, #0]

    // Configure the FREQ field of CR2 (CR2)
    tempreg = 0;
 800097c:	2300      	movs	r3, #0
 800097e:	60fb      	str	r3, [r7, #12]
    tempreg |= RCC_GetPCLK1Value() / 1000000U;
 8000980:	f000 f94c 	bl	8000c1c <RCC_GetPCLK1Value>
 8000984:	4603      	mov	r3, r0
 8000986:	4a47      	ldr	r2, [pc, #284]	@ (8000aa4 <I2C_Init+0x154>)
 8000988:	fba2 2303 	umull	r2, r3, r2, r3
 800098c:	0c9b      	lsrs	r3, r3, #18
 800098e:	68fa      	ldr	r2, [r7, #12]
 8000990:	4313      	orrs	r3, r2
 8000992:	60fb      	str	r3, [r7, #12]
    pI2CHandle->pI2Cx->CR2 = (tempreg & 0x3F); // We are bit masking the first 6 bits for safety purposes.
 8000994:	687b      	ldr	r3, [r7, #4]
 8000996:	681b      	ldr	r3, [r3, #0]
 8000998:	68fa      	ldr	r2, [r7, #12]
 800099a:	f002 023f 	and.w	r2, r2, #63	@ 0x3f
 800099e:	605a      	str	r2, [r3, #4]

    // Program device's own address (OAR1)
    tempreg = 0;
 80009a0:	2300      	movs	r3, #0
 80009a2:	60fb      	str	r3, [r7, #12]
    tempreg |= pI2CHandle->I2C_Config.I2C_DeviceAddress << 1;
 80009a4:	687b      	ldr	r3, [r7, #4]
 80009a6:	7a1b      	ldrb	r3, [r3, #8]
 80009a8:	005b      	lsls	r3, r3, #1
 80009aa:	68fa      	ldr	r2, [r7, #12]
 80009ac:	4313      	orrs	r3, r2
 80009ae:	60fb      	str	r3, [r7, #12]
    tempreg |= (1 << 14);
 80009b0:	68fb      	ldr	r3, [r7, #12]
 80009b2:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80009b6:	60fb      	str	r3, [r7, #12]
    pI2CHandle->pI2Cx->OAR1 = tempreg;
 80009b8:	687b      	ldr	r3, [r7, #4]
 80009ba:	681b      	ldr	r3, [r3, #0]
 80009bc:	68fa      	ldr	r2, [r7, #12]
 80009be:	609a      	str	r2, [r3, #8]

    // Init CCR (CCR calculations)
    uint16_t ccr_value = 0;
 80009c0:	2300      	movs	r3, #0
 80009c2:	817b      	strh	r3, [r7, #10]
    tempreg = 0;
 80009c4:	2300      	movs	r3, #0
 80009c6:	60fb      	str	r3, [r7, #12]
    if (pI2CHandle->I2C_Config.I2C_SCLSpeed <= I2C_SCL_SPEED_SM)
 80009c8:	687b      	ldr	r3, [r7, #4]
 80009ca:	685b      	ldr	r3, [r3, #4]
 80009cc:	4a36      	ldr	r2, [pc, #216]	@ (8000aa8 <I2C_Init+0x158>)
 80009ce:	4293      	cmp	r3, r2
 80009d0:	d80f      	bhi.n	80009f2 <I2C_Init+0xa2>
    {
        // mode is standard
        ccr_value = (RCC_GetPCLK1Value() / (2 * pI2CHandle->I2C_Config.I2C_SCLSpeed));
 80009d2:	f000 f923 	bl	8000c1c <RCC_GetPCLK1Value>
 80009d6:	4602      	mov	r2, r0
 80009d8:	687b      	ldr	r3, [r7, #4]
 80009da:	685b      	ldr	r3, [r3, #4]
 80009dc:	005b      	lsls	r3, r3, #1
 80009de:	fbb2 f3f3 	udiv	r3, r2, r3
 80009e2:	817b      	strh	r3, [r7, #10]
        tempreg |= (ccr_value & 0xFFF); // Masking out other bits, as CCR is only 12-bit length, whereas ccr_value is 16-bit
 80009e4:	897b      	ldrh	r3, [r7, #10]
 80009e6:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80009ea:	68fa      	ldr	r2, [r7, #12]
 80009ec:	4313      	orrs	r3, r2
 80009ee:	60fb      	str	r3, [r7, #12]
 80009f0:	e02c      	b.n	8000a4c <I2C_Init+0xfc>
    }
    else
    {
        // mode is fast
        tempreg |= (1 << 15); // Fast mode is configured
 80009f2:	68fb      	ldr	r3, [r7, #12]
 80009f4:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80009f8:	60fb      	str	r3, [r7, #12]
        tempreg |= (pI2CHandle->I2C_Config.I2C_FMDutyCycle << 14);
 80009fa:	687b      	ldr	r3, [r7, #4]
 80009fc:	895b      	ldrh	r3, [r3, #10]
 80009fe:	039b      	lsls	r3, r3, #14
 8000a00:	68fa      	ldr	r2, [r7, #12]
 8000a02:	4313      	orrs	r3, r2
 8000a04:	60fb      	str	r3, [r7, #12]

        if (pI2CHandle->I2C_Config.I2C_FMDutyCycle == I2C_FM_DUTY_2)
 8000a06:	687b      	ldr	r3, [r7, #4]
 8000a08:	895b      	ldrh	r3, [r3, #10]
 8000a0a:	2b00      	cmp	r3, #0
 8000a0c:	d10b      	bne.n	8000a26 <I2C_Init+0xd6>
        {
            ccr_value = (RCC_GetPCLK1Value() / (3 * pI2CHandle->I2C_Config.I2C_SCLSpeed));
 8000a0e:	f000 f905 	bl	8000c1c <RCC_GetPCLK1Value>
 8000a12:	4601      	mov	r1, r0
 8000a14:	687b      	ldr	r3, [r7, #4]
 8000a16:	685a      	ldr	r2, [r3, #4]
 8000a18:	4613      	mov	r3, r2
 8000a1a:	005b      	lsls	r3, r3, #1
 8000a1c:	4413      	add	r3, r2
 8000a1e:	fbb1 f3f3 	udiv	r3, r1, r3
 8000a22:	817b      	strh	r3, [r7, #10]
 8000a24:	e00c      	b.n	8000a40 <I2C_Init+0xf0>
        }
        else
        {
            ccr_value = (RCC_GetPCLK1Value() / (25 * pI2CHandle->I2C_Config.I2C_SCLSpeed));
 8000a26:	f000 f8f9 	bl	8000c1c <RCC_GetPCLK1Value>
 8000a2a:	4601      	mov	r1, r0
 8000a2c:	687b      	ldr	r3, [r7, #4]
 8000a2e:	685a      	ldr	r2, [r3, #4]
 8000a30:	4613      	mov	r3, r2
 8000a32:	009b      	lsls	r3, r3, #2
 8000a34:	4413      	add	r3, r2
 8000a36:	009a      	lsls	r2, r3, #2
 8000a38:	4413      	add	r3, r2
 8000a3a:	fbb1 f3f3 	udiv	r3, r1, r3
 8000a3e:	817b      	strh	r3, [r7, #10]
        }
        tempreg |= (ccr_value & 0xFFF);
 8000a40:	897b      	ldrh	r3, [r7, #10]
 8000a42:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8000a46:	68fa      	ldr	r2, [r7, #12]
 8000a48:	4313      	orrs	r3, r2
 8000a4a:	60fb      	str	r3, [r7, #12]
    }
    pI2CHandle->pI2Cx->CCR = tempreg;
 8000a4c:	687b      	ldr	r3, [r7, #4]
 8000a4e:	681b      	ldr	r3, [r3, #0]
 8000a50:	68fa      	ldr	r2, [r7, #12]
 8000a52:	61da      	str	r2, [r3, #28]

    // TRISE configuration
    if (pI2CHandle->I2C_Config.I2C_SCLSpeed <= I2C_SCL_SPEED_SM)
 8000a54:	687b      	ldr	r3, [r7, #4]
 8000a56:	685b      	ldr	r3, [r3, #4]
 8000a58:	4a13      	ldr	r2, [pc, #76]	@ (8000aa8 <I2C_Init+0x158>)
 8000a5a:	4293      	cmp	r3, r2
 8000a5c:	d809      	bhi.n	8000a72 <I2C_Init+0x122>
    {
        // mode is standard
        tempreg = (RCC_GetPCLK1Value() / 1000000) + 1;
 8000a5e:	f000 f8dd 	bl	8000c1c <RCC_GetPCLK1Value>
 8000a62:	4603      	mov	r3, r0
 8000a64:	4a0f      	ldr	r2, [pc, #60]	@ (8000aa4 <I2C_Init+0x154>)
 8000a66:	fba2 2303 	umull	r2, r3, r2, r3
 8000a6a:	0c9b      	lsrs	r3, r3, #18
 8000a6c:	3301      	adds	r3, #1
 8000a6e:	60fb      	str	r3, [r7, #12]
 8000a70:	e00c      	b.n	8000a8c <I2C_Init+0x13c>
    }
    else
    {
        // mode is fast mode
        tempreg = ((RCC_GetPCLK1Value() * 300) / 1000000) + 1;
 8000a72:	f000 f8d3 	bl	8000c1c <RCC_GetPCLK1Value>
 8000a76:	4603      	mov	r3, r0
 8000a78:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 8000a7c:	fb02 f303 	mul.w	r3, r2, r3
 8000a80:	4a08      	ldr	r2, [pc, #32]	@ (8000aa4 <I2C_Init+0x154>)
 8000a82:	fba2 2303 	umull	r2, r3, r2, r3
 8000a86:	0c9b      	lsrs	r3, r3, #18
 8000a88:	3301      	adds	r3, #1
 8000a8a:	60fb      	str	r3, [r7, #12]
    }
    pI2CHandle->pI2Cx->TRISE = tempreg & 0x3F;
 8000a8c:	687b      	ldr	r3, [r7, #4]
 8000a8e:	681b      	ldr	r3, [r3, #0]
 8000a90:	68fa      	ldr	r2, [r7, #12]
 8000a92:	f002 023f 	and.w	r2, r2, #63	@ 0x3f
 8000a96:	621a      	str	r2, [r3, #32]
}
 8000a98:	bf00      	nop
 8000a9a:	3710      	adds	r7, #16
 8000a9c:	46bd      	mov	sp, r7
 8000a9e:	bd80      	pop	{r7, pc}
 8000aa0:	40005400 	.word	0x40005400
 8000aa4:	431bde83 	.word	0x431bde83
 8000aa8:	000186a0 	.word	0x000186a0

08000aac <I2C_GetFlagStatus>:
        I2C3_REG_RESET();
    }
}

uint8_t I2C_GetFlagStatus(I2C_RegDef_t *pI2Cx, uint32_t FlagName)
{
 8000aac:	b480      	push	{r7}
 8000aae:	b083      	sub	sp, #12
 8000ab0:	af00      	add	r7, sp, #0
 8000ab2:	6078      	str	r0, [r7, #4]
 8000ab4:	6039      	str	r1, [r7, #0]
    if (pI2Cx->SR1 & FlagName)
 8000ab6:	687b      	ldr	r3, [r7, #4]
 8000ab8:	695a      	ldr	r2, [r3, #20]
 8000aba:	683b      	ldr	r3, [r7, #0]
 8000abc:	4013      	ands	r3, r2
 8000abe:	2b00      	cmp	r3, #0
 8000ac0:	d001      	beq.n	8000ac6 <I2C_GetFlagStatus+0x1a>
    {
        return FLAG_SET;
 8000ac2:	2301      	movs	r3, #1
 8000ac4:	e000      	b.n	8000ac8 <I2C_GetFlagStatus+0x1c>
    }
    return FLAG_RESET;
 8000ac6:	2300      	movs	r3, #0
}
 8000ac8:	4618      	mov	r0, r3
 8000aca:	370c      	adds	r7, #12
 8000acc:	46bd      	mov	sp, r7
 8000ace:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ad2:	4770      	bx	lr

08000ad4 <I2C_PeripheralControl>:
 *
 * @param pI2Cx
 * @param EnOrDi
 */
void I2C_PeripheralControl(I2C_RegDef_t *pI2Cx, uint8_t EnOrDi)
{
 8000ad4:	b480      	push	{r7}
 8000ad6:	b083      	sub	sp, #12
 8000ad8:	af00      	add	r7, sp, #0
 8000ada:	6078      	str	r0, [r7, #4]
 8000adc:	460b      	mov	r3, r1
 8000ade:	70fb      	strb	r3, [r7, #3]
    if (EnOrDi == ENABLE)
 8000ae0:	78fb      	ldrb	r3, [r7, #3]
 8000ae2:	2b01      	cmp	r3, #1
 8000ae4:	d106      	bne.n	8000af4 <I2C_PeripheralControl+0x20>
    {
        pI2Cx->CR1 |= (1 << I2C_CR1_PE);
 8000ae6:	687b      	ldr	r3, [r7, #4]
 8000ae8:	681b      	ldr	r3, [r3, #0]
 8000aea:	f043 0201 	orr.w	r2, r3, #1
 8000aee:	687b      	ldr	r3, [r7, #4]
 8000af0:	601a      	str	r2, [r3, #0]
    }
    else
    {
        pI2Cx->CR1 &= ~(1 << I2C_CR1_PE);
    }
}
 8000af2:	e005      	b.n	8000b00 <I2C_PeripheralControl+0x2c>
        pI2Cx->CR1 &= ~(1 << I2C_CR1_PE);
 8000af4:	687b      	ldr	r3, [r7, #4]
 8000af6:	681b      	ldr	r3, [r3, #0]
 8000af8:	f023 0201 	bic.w	r2, r3, #1
 8000afc:	687b      	ldr	r3, [r7, #4]
 8000afe:	601a      	str	r2, [r3, #0]
}
 8000b00:	bf00      	nop
 8000b02:	370c      	adds	r7, #12
 8000b04:	46bd      	mov	sp, r7
 8000b06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b0a:	4770      	bx	lr

08000b0c <I2C_ManageACKing>:

void I2C_ManageACKing(I2C_RegDef_t *pI2Cx, uint8_t EnOrDi)
{
 8000b0c:	b480      	push	{r7}
 8000b0e:	b083      	sub	sp, #12
 8000b10:	af00      	add	r7, sp, #0
 8000b12:	6078      	str	r0, [r7, #4]
 8000b14:	460b      	mov	r3, r1
 8000b16:	70fb      	strb	r3, [r7, #3]
    if (EnOrDi == I2C_ACK_ENABLE)
 8000b18:	78fb      	ldrb	r3, [r7, #3]
 8000b1a:	2b01      	cmp	r3, #1
 8000b1c:	d106      	bne.n	8000b2c <I2C_ManageACKing+0x20>
    {
        // enable the ack
        pI2Cx->CR1 |= (1 << I2C_CR1_ACK);
 8000b1e:	687b      	ldr	r3, [r7, #4]
 8000b20:	681b      	ldr	r3, [r3, #0]
 8000b22:	f443 6280 	orr.w	r2, r3, #1024	@ 0x400
 8000b26:	687b      	ldr	r3, [r7, #4]
 8000b28:	601a      	str	r2, [r3, #0]
    else
    {
        // disable the ack
        pI2Cx->CR1 &= ~(1 << I2C_CR1_ACK);
    }
}
 8000b2a:	e005      	b.n	8000b38 <I2C_ManageACKing+0x2c>
        pI2Cx->CR1 &= ~(1 << I2C_CR1_ACK);
 8000b2c:	687b      	ldr	r3, [r7, #4]
 8000b2e:	681b      	ldr	r3, [r3, #0]
 8000b30:	f423 6280 	bic.w	r2, r3, #1024	@ 0x400
 8000b34:	687b      	ldr	r3, [r7, #4]
 8000b36:	601a      	str	r2, [r3, #0]
}
 8000b38:	bf00      	nop
 8000b3a:	370c      	adds	r7, #12
 8000b3c:	46bd      	mov	sp, r7
 8000b3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b42:	4770      	bx	lr

08000b44 <I2C_PeripheralReceiveData2>:
{
    pI2Cx->DR = data;
}

uint8_t I2C_PeripheralReceiveData2(I2C_Handle_t *pI2CHandle, uint8_t *pRxBuffer, uint8_t Len)
{
 8000b44:	b580      	push	{r7, lr}
 8000b46:	b086      	sub	sp, #24
 8000b48:	af00      	add	r7, sp, #0
 8000b4a:	60f8      	str	r0, [r7, #12]
 8000b4c:	60b9      	str	r1, [r7, #8]
 8000b4e:	4613      	mov	r3, r2
 8000b50:	71fb      	strb	r3, [r7, #7]
	uint8_t temp = 0;
 8000b52:	2300      	movs	r3, #0
 8000b54:	74fb      	strb	r3, [r7, #19]
	uint8_t temp2 = 0;
 8000b56:	2300      	movs	r3, #0
 8000b58:	74bb      	strb	r3, [r7, #18]

	while(!(pI2CHandle->pI2Cx->SR1 & (1 << 1)));
 8000b5a:	bf00      	nop
 8000b5c:	68fb      	ldr	r3, [r7, #12]
 8000b5e:	681b      	ldr	r3, [r3, #0]
 8000b60:	695b      	ldr	r3, [r3, #20]
 8000b62:	f003 0302 	and.w	r3, r3, #2
 8000b66:	2b00      	cmp	r3, #0
 8000b68:	d0f8      	beq.n	8000b5c <I2C_PeripheralReceiveData2+0x18>

    // 5. Procedure to read only 1 byte from peripheral
    if (Len == 1)
 8000b6a:	79fb      	ldrb	r3, [r7, #7]
 8000b6c:	2b01      	cmp	r3, #1
 8000b6e:	d114      	bne.n	8000b9a <I2C_PeripheralReceiveData2+0x56>
    {
        // Clear the ADDR Flag
        I2C_ClearADDRFlag(pI2CHandle);
 8000b70:	68f8      	ldr	r0, [r7, #12]
 8000b72:	f7ff fe4d 	bl	8000810 <I2C_ClearADDRFlag>

        // Read data into buffer and clear RxNE flag
        *pRxBuffer = pI2CHandle->pI2Cx->DR;
 8000b76:	68fb      	ldr	r3, [r7, #12]
 8000b78:	681b      	ldr	r3, [r3, #0]
 8000b7a:	691b      	ldr	r3, [r3, #16]
 8000b7c:	b2da      	uxtb	r2, r3
 8000b7e:	68bb      	ldr	r3, [r7, #8]
 8000b80:	701a      	strb	r2, [r3, #0]

        // Generate STOP condition
        I2C_GenerateStopCondition(pI2CHandle->pI2Cx);
 8000b82:	68fb      	ldr	r3, [r7, #12]
 8000b84:	681b      	ldr	r3, [r3, #0]
 8000b86:	4618      	mov	r0, r3
 8000b88:	f7ff fe79 	bl	800087e <I2C_GenerateStopCondition>

        // Clear STOPF flag
        // Read SR1
        temp = I2C1->SR1;
 8000b8c:	4b1e      	ldr	r3, [pc, #120]	@ (8000c08 <I2C_PeripheralReceiveData2+0xc4>)
 8000b8e:	695b      	ldr	r3, [r3, #20]
 8000b90:	74fb      	strb	r3, [r7, #19]
        // Write into CR1
        I2C1->CR1 |= 0x0000;
 8000b92:	4b1d      	ldr	r3, [pc, #116]	@ (8000c08 <I2C_PeripheralReceiveData2+0xc4>)
 8000b94:	4a1c      	ldr	r2, [pc, #112]	@ (8000c08 <I2C_PeripheralReceiveData2+0xc4>)
 8000b96:	681b      	ldr	r3, [r3, #0]
 8000b98:	6013      	str	r3, [r2, #0]
    }

    // 5. Procedure to read data from peripheral when Len > 1
    if (Len > 1)
 8000b9a:	79fb      	ldrb	r3, [r7, #7]
 8000b9c:	2b01      	cmp	r3, #1
 8000b9e:	d92a      	bls.n	8000bf6 <I2C_PeripheralReceiveData2+0xb2>
    {
        // Clear the ADDR flag
        I2C_ClearADDRFlag(pI2CHandle);
 8000ba0:	68f8      	ldr	r0, [r7, #12]
 8000ba2:	f7ff fe35 	bl	8000810 <I2C_ClearADDRFlag>

        // Read the data until Len becomes zero
        for (uint32_t i = Len; i > 0; i--)
 8000ba6:	79fb      	ldrb	r3, [r7, #7]
 8000ba8:	617b      	str	r3, [r7, #20]
 8000baa:	e015      	b.n	8000bd8 <I2C_PeripheralReceiveData2+0x94>
        {
        	//wait until RXNE becomes 1
        	while(! I2C_GetFlagStatus(pI2CHandle->pI2Cx,I2C_FLAG_RXNE) );
 8000bac:	bf00      	nop
 8000bae:	68fb      	ldr	r3, [r7, #12]
 8000bb0:	681b      	ldr	r3, [r3, #0]
 8000bb2:	2140      	movs	r1, #64	@ 0x40
 8000bb4:	4618      	mov	r0, r3
 8000bb6:	f7ff ff79 	bl	8000aac <I2C_GetFlagStatus>
 8000bba:	4603      	mov	r3, r0
 8000bbc:	2b00      	cmp	r3, #0
 8000bbe:	d0f6      	beq.n	8000bae <I2C_PeripheralReceiveData2+0x6a>

        	// Read data into buffer and clear RxNE flag
        	*pRxBuffer = pI2CHandle->pI2Cx->DR;
 8000bc0:	68fb      	ldr	r3, [r7, #12]
 8000bc2:	681b      	ldr	r3, [r3, #0]
 8000bc4:	691b      	ldr	r3, [r3, #16]
 8000bc6:	b2da      	uxtb	r2, r3
 8000bc8:	68bb      	ldr	r3, [r7, #8]
 8000bca:	701a      	strb	r2, [r3, #0]

            // Increment the buffer address
            pRxBuffer++;
 8000bcc:	68bb      	ldr	r3, [r7, #8]
 8000bce:	3301      	adds	r3, #1
 8000bd0:	60bb      	str	r3, [r7, #8]
        for (uint32_t i = Len; i > 0; i--)
 8000bd2:	697b      	ldr	r3, [r7, #20]
 8000bd4:	3b01      	subs	r3, #1
 8000bd6:	617b      	str	r3, [r7, #20]
 8000bd8:	697b      	ldr	r3, [r7, #20]
 8000bda:	2b00      	cmp	r3, #0
 8000bdc:	d1e6      	bne.n	8000bac <I2C_PeripheralReceiveData2+0x68>
        }

        // Read data into buffer and clear RxNE flag
        //*pRxBuffer = pI2CHandle->pI2Cx->DR;

        I2C_GenerateStopCondition(pI2CHandle->pI2Cx);
 8000bde:	68fb      	ldr	r3, [r7, #12]
 8000be0:	681b      	ldr	r3, [r3, #0]
 8000be2:	4618      	mov	r0, r3
 8000be4:	f7ff fe4b 	bl	800087e <I2C_GenerateStopCondition>

        // Clear STOPF flag
        // Read SR1
        temp = I2C1->SR1;
 8000be8:	4b07      	ldr	r3, [pc, #28]	@ (8000c08 <I2C_PeripheralReceiveData2+0xc4>)
 8000bea:	695b      	ldr	r3, [r3, #20]
 8000bec:	74fb      	strb	r3, [r7, #19]
        // Write into CR1
        I2C1->CR1 |= 0x0000;
 8000bee:	4b06      	ldr	r3, [pc, #24]	@ (8000c08 <I2C_PeripheralReceiveData2+0xc4>)
 8000bf0:	4a05      	ldr	r2, [pc, #20]	@ (8000c08 <I2C_PeripheralReceiveData2+0xc4>)
 8000bf2:	681b      	ldr	r3, [r3, #0]
 8000bf4:	6013      	str	r3, [r2, #0]
    }

    return (uint8_t)(pI2CHandle->pI2Cx->DR);
 8000bf6:	68fb      	ldr	r3, [r7, #12]
 8000bf8:	681b      	ldr	r3, [r3, #0]
 8000bfa:	691b      	ldr	r3, [r3, #16]
 8000bfc:	b2db      	uxtb	r3, r3
}
 8000bfe:	4618      	mov	r0, r3
 8000c00:	3718      	adds	r7, #24
 8000c02:	46bd      	mov	sp, r7
 8000c04:	bd80      	pop	{r7, pc}
 8000c06:	bf00      	nop
 8000c08:	40005400 	.word	0x40005400

08000c0c <RCC_GetPLLOutput>:
uint16_t AHB_PreScaler[8] = {2, 4, 8, 16, 64, 128, 256, 512};
uint16_t APB1_PreScaler[4] = {2, 4, 8, 16};
uint16_t APB2_PreScaler[4] = {2, 4, 8, 16};

uint32_t RCC_GetPLLOutput()
{
 8000c0c:	b480      	push	{r7}
 8000c0e:	af00      	add	r7, sp, #0
    return 0;
 8000c10:	2300      	movs	r3, #0
}
 8000c12:	4618      	mov	r0, r3
 8000c14:	46bd      	mov	sp, r7
 8000c16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c1a:	4770      	bx	lr

08000c1c <RCC_GetPCLK1Value>:

uint32_t RCC_GetPCLK1Value(void)
{
 8000c1c:	b580      	push	{r7, lr}
 8000c1e:	b084      	sub	sp, #16
 8000c20:	af00      	add	r7, sp, #0
    uint32_t pclk1, SystemClk;
    uint8_t clksrc, temp, ahbp, apb1p;
    clksrc = (( RCC->CFGR >> 2 ) & 0x3 );
 8000c22:	4b26      	ldr	r3, [pc, #152]	@ (8000cbc <RCC_GetPCLK1Value+0xa0>)
 8000c24:	689b      	ldr	r3, [r3, #8]
 8000c26:	089b      	lsrs	r3, r3, #2
 8000c28:	b2db      	uxtb	r3, r3
 8000c2a:	f003 0303 	and.w	r3, r3, #3
 8000c2e:	727b      	strb	r3, [r7, #9]

    if( clksrc == 0 )
 8000c30:	7a7b      	ldrb	r3, [r7, #9]
 8000c32:	2b00      	cmp	r3, #0
 8000c34:	d102      	bne.n	8000c3c <RCC_GetPCLK1Value+0x20>
    {
        SystemClk = 16000000;
 8000c36:	4b22      	ldr	r3, [pc, #136]	@ (8000cc0 <RCC_GetPCLK1Value+0xa4>)
 8000c38:	60fb      	str	r3, [r7, #12]
 8000c3a:	e00b      	b.n	8000c54 <RCC_GetPCLK1Value+0x38>
    }
    else if( clksrc == 1 )
 8000c3c:	7a7b      	ldrb	r3, [r7, #9]
 8000c3e:	2b01      	cmp	r3, #1
 8000c40:	d102      	bne.n	8000c48 <RCC_GetPCLK1Value+0x2c>
    {
        SystemClk = 8000000;
 8000c42:	4b20      	ldr	r3, [pc, #128]	@ (8000cc4 <RCC_GetPCLK1Value+0xa8>)
 8000c44:	60fb      	str	r3, [r7, #12]
 8000c46:	e005      	b.n	8000c54 <RCC_GetPCLK1Value+0x38>
    }
    else if( clksrc == 2 )
 8000c48:	7a7b      	ldrb	r3, [r7, #9]
 8000c4a:	2b02      	cmp	r3, #2
 8000c4c:	d102      	bne.n	8000c54 <RCC_GetPCLK1Value+0x38>
    {
        SystemClk = RCC_GetPLLOutput();
 8000c4e:	f7ff ffdd 	bl	8000c0c <RCC_GetPLLOutput>
 8000c52:	60f8      	str	r0, [r7, #12]
    }

    temp = ( ( RCC->CFGR >> 4 ) & 0xF );
 8000c54:	4b19      	ldr	r3, [pc, #100]	@ (8000cbc <RCC_GetPCLK1Value+0xa0>)
 8000c56:	689b      	ldr	r3, [r3, #8]
 8000c58:	091b      	lsrs	r3, r3, #4
 8000c5a:	b2db      	uxtb	r3, r3
 8000c5c:	f003 030f 	and.w	r3, r3, #15
 8000c60:	723b      	strb	r3, [r7, #8]

    // AHB Prescaler calculations
    if(temp < 8)
 8000c62:	7a3b      	ldrb	r3, [r7, #8]
 8000c64:	2b07      	cmp	r3, #7
 8000c66:	d802      	bhi.n	8000c6e <RCC_GetPCLK1Value+0x52>
    {
        ahbp = 1;
 8000c68:	2301      	movs	r3, #1
 8000c6a:	72fb      	strb	r3, [r7, #11]
 8000c6c:	e005      	b.n	8000c7a <RCC_GetPCLK1Value+0x5e>
    }
    else
    {
        ahbp = AHB_PreScaler[temp-8];
 8000c6e:	7a3b      	ldrb	r3, [r7, #8]
 8000c70:	3b08      	subs	r3, #8
 8000c72:	4a15      	ldr	r2, [pc, #84]	@ (8000cc8 <RCC_GetPCLK1Value+0xac>)
 8000c74:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8000c78:	72fb      	strb	r3, [r7, #11]
    }

    temp = ( ( RCC->CFGR >> 10 ) & 0x7 );
 8000c7a:	4b10      	ldr	r3, [pc, #64]	@ (8000cbc <RCC_GetPCLK1Value+0xa0>)
 8000c7c:	689b      	ldr	r3, [r3, #8]
 8000c7e:	0a9b      	lsrs	r3, r3, #10
 8000c80:	b2db      	uxtb	r3, r3
 8000c82:	f003 0307 	and.w	r3, r3, #7
 8000c86:	723b      	strb	r3, [r7, #8]

    // APB Prescaler calculations
    if(temp < 4)
 8000c88:	7a3b      	ldrb	r3, [r7, #8]
 8000c8a:	2b03      	cmp	r3, #3
 8000c8c:	d802      	bhi.n	8000c94 <RCC_GetPCLK1Value+0x78>
    {
        apb1p = 1;
 8000c8e:	2301      	movs	r3, #1
 8000c90:	72bb      	strb	r3, [r7, #10]
 8000c92:	e005      	b.n	8000ca0 <RCC_GetPCLK1Value+0x84>
    }
    else
    {
        apb1p = APB1_PreScaler[temp-4];
 8000c94:	7a3b      	ldrb	r3, [r7, #8]
 8000c96:	3b04      	subs	r3, #4
 8000c98:	4a0c      	ldr	r2, [pc, #48]	@ (8000ccc <RCC_GetPCLK1Value+0xb0>)
 8000c9a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8000c9e:	72bb      	strb	r3, [r7, #10]
    }

    pclk1 = ( SystemClk / ahbp ) / apb1p;
 8000ca0:	7afb      	ldrb	r3, [r7, #11]
 8000ca2:	68fa      	ldr	r2, [r7, #12]
 8000ca4:	fbb2 f2f3 	udiv	r2, r2, r3
 8000ca8:	7abb      	ldrb	r3, [r7, #10]
 8000caa:	fbb2 f3f3 	udiv	r3, r2, r3
 8000cae:	607b      	str	r3, [r7, #4]

    return pclk1;
 8000cb0:	687b      	ldr	r3, [r7, #4]
}
 8000cb2:	4618      	mov	r0, r3
 8000cb4:	3710      	adds	r7, #16
 8000cb6:	46bd      	mov	sp, r7
 8000cb8:	bd80      	pop	{r7, pc}
 8000cba:	bf00      	nop
 8000cbc:	40023800 	.word	0x40023800
 8000cc0:	00f42400 	.word	0x00f42400
 8000cc4:	007a1200 	.word	0x007a1200
 8000cc8:	20000000 	.word	0x20000000
 8000ccc:	20000010 	.word	0x20000010

08000cd0 <__libc_init_array>:
 8000cd0:	b570      	push	{r4, r5, r6, lr}
 8000cd2:	4d0d      	ldr	r5, [pc, #52]	@ (8000d08 <__libc_init_array+0x38>)
 8000cd4:	4c0d      	ldr	r4, [pc, #52]	@ (8000d0c <__libc_init_array+0x3c>)
 8000cd6:	1b64      	subs	r4, r4, r5
 8000cd8:	10a4      	asrs	r4, r4, #2
 8000cda:	2600      	movs	r6, #0
 8000cdc:	42a6      	cmp	r6, r4
 8000cde:	d109      	bne.n	8000cf4 <__libc_init_array+0x24>
 8000ce0:	4d0b      	ldr	r5, [pc, #44]	@ (8000d10 <__libc_init_array+0x40>)
 8000ce2:	4c0c      	ldr	r4, [pc, #48]	@ (8000d14 <__libc_init_array+0x44>)
 8000ce4:	f000 f818 	bl	8000d18 <_init>
 8000ce8:	1b64      	subs	r4, r4, r5
 8000cea:	10a4      	asrs	r4, r4, #2
 8000cec:	2600      	movs	r6, #0
 8000cee:	42a6      	cmp	r6, r4
 8000cf0:	d105      	bne.n	8000cfe <__libc_init_array+0x2e>
 8000cf2:	bd70      	pop	{r4, r5, r6, pc}
 8000cf4:	f855 3b04 	ldr.w	r3, [r5], #4
 8000cf8:	4798      	blx	r3
 8000cfa:	3601      	adds	r6, #1
 8000cfc:	e7ee      	b.n	8000cdc <__libc_init_array+0xc>
 8000cfe:	f855 3b04 	ldr.w	r3, [r5], #4
 8000d02:	4798      	blx	r3
 8000d04:	3601      	adds	r6, #1
 8000d06:	e7f2      	b.n	8000cee <__libc_init_array+0x1e>
 8000d08:	08000d30 	.word	0x08000d30
 8000d0c:	08000d30 	.word	0x08000d30
 8000d10:	08000d30 	.word	0x08000d30
 8000d14:	08000d34 	.word	0x08000d34

08000d18 <_init>:
 8000d18:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000d1a:	bf00      	nop
 8000d1c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000d1e:	bc08      	pop	{r3}
 8000d20:	469e      	mov	lr, r3
 8000d22:	4770      	bx	lr

08000d24 <_fini>:
 8000d24:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000d26:	bf00      	nop
 8000d28:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000d2a:	bc08      	pop	{r3}
 8000d2c:	469e      	mov	lr, r3
 8000d2e:	4770      	bx	lr
